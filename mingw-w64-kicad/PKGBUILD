# Maintainer: Alexey Pavlov <alexpux@gmail.com>
# Contributor: Tim Stahlhut <stahta01@gmail.com>

# After building and uploading with pkgrel=1 setting to no is suggested;
# This results in only the core KiCAD package being built and reduces
# the build time and band width usage because the support libraries
# do not change very often and are very large.
_build_support_libraries=no
# meta wants to download the other packages which waste time during
# development; but, needs to be yes after development is over.
_build_meta=yes

_realname=kicad
_wx_basever=3.0
pkgbase=mingw-w64-${_realname}
pkgname=(
  "${MINGW_PACKAGE_PREFIX}-${_realname}"
  $([[ "$_build_meta" == "yes" ]] && echo "${MINGW_PACKAGE_PREFIX}-${_realname}-meta")
  $([[ "$_build_support_libraries" == "yes" ]] && echo "${MINGW_PACKAGE_PREFIX}-${_realname}-footprints")
  $([[ "$_build_support_libraries" == "yes" ]] && echo "${MINGW_PACKAGE_PREFIX}-${_realname}-symbols")
  $([[ "$_build_support_libraries" == "yes" ]] && echo "${MINGW_PACKAGE_PREFIX}-${_realname}-templates")
  $([[ "$_build_support_libraries" == "yes" ]] && echo "${MINGW_PACKAGE_PREFIX}-${_realname}-packages3D")
)
pkgver=5.1.12
pkgrel=2
pkgdesc="Software for the creation of electronic schematic diagrams and printed circuit board artwork (mingw-w64)"
arch=(any)
mingw_arch=('mingw32' 'mingw64' 'ucrt64' 'clang64')
url="https://www.kicad.org/"
license=("GPLv3+")
groups=("${MINGW_PACKAGE_PREFIX}-eda")
depends=(
  "${MINGW_PACKAGE_PREFIX}-boost"
  "${MINGW_PACKAGE_PREFIX}-curl"
  "${MINGW_PACKAGE_PREFIX}-glew"
  "${MINGW_PACKAGE_PREFIX}-glm"
  "${MINGW_PACKAGE_PREFIX}-ngspice"
  "${MINGW_PACKAGE_PREFIX}-python"
  "${MINGW_PACKAGE_PREFIX}-wxPython4.0"
  "${MINGW_PACKAGE_PREFIX}-wxmsw${_wx_basever}"
  "${MINGW_PACKAGE_PREFIX}-openssl"
  "${MINGW_PACKAGE_PREFIX}-freeglut"
  "${MINGW_PACKAGE_PREFIX}-zlib"
  $([[ ${MINGW_PACKAGE_PREFIX} != *-clang-aarch64* ]] && echo "${MINGW_PACKAGE_PREFIX}-opencascade")
  "${MINGW_PACKAGE_PREFIX}-cairo"
)
makedepends=(
  "git"
  "${MINGW_PACKAGE_PREFIX}-cmake"
  "${MINGW_PACKAGE_PREFIX}-cc"
  "${MINGW_PACKAGE_PREFIX}-doxygen"
  "${MINGW_PACKAGE_PREFIX}-make"
  "${MINGW_PACKAGE_PREFIX}-pkg-config"
  "${MINGW_PACKAGE_PREFIX}-swig"
)
source=(
  '001-fix-FindwxWidgets.cmake.patch'
  '002-cmake-fixes-for-MINGW-CLANG.patch'
  '003-code-fixes-for-GNUC-CLANG.patch'
  '004-Backport-MinGW-Resource-Compiler-changes-from-6.0.patch'
  '005-opencascade-7.6.0.patch'::"https://gitlab.com/kicad/code/kicad/-/commit/9a9c7856b3592dbca62eeea8232281e5e9b7e036.patch"
  "${_realname}-${pkgver}.tar.gz"::"https://gitlab.com/kicad/code/kicad/-/archive/${pkgver}/kicad-${pkgver}.tar.gz"
  "${_realname}-i18n-${pkgver}.tar.gz"::"https://gitlab.com/kicad/code/kicad-i18n/-/archive/${pkgver}/kicad-i18n-${pkgver}.tar.gz"
)
if [ "$_build_support_libraries" == "yes" ]; then
  source+=(
    "${_realname}-footprints-${pkgver}.tar.gz"::"https://gitlab.com/kicad/libraries/kicad-footprints/-/archive/${pkgver}/kicad-footprints-${pkgver}.tar.gz"
    "${_realname}-symbols-${pkgver}.tar.gz"::"https://gitlab.com/kicad/libraries/kicad-symbols/-/archive/${pkgver}/kicad-symbols-${pkgver}.tar.gz"
    "${_realname}-templates-${pkgver}.tar.gz"::"https://gitlab.com/kicad/libraries/kicad-templates/-/archive/${pkgver}/kicad-templates-${pkgver}.tar.gz"
    "${_realname}-packages3D-${pkgver}.tar.gz"::"https://gitlab.com/kicad/libraries/kicad-packages3D/-/archive/${pkgver}/kicad-packages3D-${pkgver}.tar.gz"
  )
fi
sha256sums=('3fe6d1126dc3a4e3d720714fc08ca8d10771f3d38f2a2118b95f9ca41ace0c2d'
            'b7bac9a0968575470daba671a9732a1e277d707a6e5bc15edbee85d22e9b223d'
            '7b8898a49a405509e35ed785735668e9837e1db7492b0fc2c80175b1ed153cbb'
            '5cee84d1af1f511d45f0422b8d1cb774822bffe3a4fbadb4455aaad8ffe5c69a'
            '3f586437c79185afdfa6c70defe60788bb5e5286e6ab6b7d9dfa2451b825bfd5'
            '101cc025e55cb3cc047debe5e4b1ac1fa116ceed147fef1bc275d8e21f76aa3f'
            'bdaad9a89f2f0454f48a6e183cd2cce953b7f519ce79324858b25c74ce8789c5')
if [ "$_build_support_libraries" == "yes" ]; then
  sha256sums+=(
            'd16742054ee5eacb7db916280960be7a5218d11b0b2201fa6cb6d61ee34652ec'
            'f641e121a53cc2b7d2fe25fea88a4b1f14701a068c7243fdc0efa129497b332f'
            '7b07b82b424875bfde34c6529b8524446bc8c4d608f48739380179520496596f'
            '2752bb2cced9686e6edf043c6829db53ff4ae4c0e52d8318602da9cde82d0652')
fi
_doc=("ca" "de" "en" "es" "fr" "id" "it" "ja" "nl" "pl" "ru" "zh")
 _sub=("footprints" "symbols" "templates" "packages3D")

# Helper macros to help make tasks easier #
apply_patch_with_msg() {
  for _fname in "$@"
  do
    msg2 "Applying ${_fname}"
    patch -Nbp1 -i "${srcdir}"/${_fname}
  done
}

prepare() {
  cd ${_realname}-${pkgver}
  apply_patch_with_msg \
    001-fix-FindwxWidgets.cmake.patch \
    002-cmake-fixes-for-MINGW-CLANG.patch \
    003-code-fixes-for-GNUC-CLANG.patch \
    004-Backport-MinGW-Resource-Compiler-changes-from-6.0.patch \
    005-opencascade-7.6.0.patch
}

build() {
  cd "${srcdir}"
  msg2 "Build kicad"
  [[ -d build-${MSYSTEM} ]] && rm -rf build-${MSYSTEM}
  mkdir -p build-${MSYSTEM} && cd build-${MSYSTEM}

  MSYS2_ARG_CONV_EXCL="-DCMAKE_INSTALL_PREFIX=;DCMAKE_PREFIX_PATH=;DEFAULT_INSTALL_PATH=" \
  cmake \
    -G"MinGW Makefiles" \
    -DCMAKE_PREFIX_PATH=${MINGW_PREFIX} \
    -DCMAKE_INSTALL_PREFIX=${MINGW_PREFIX} \
    -DCMAKE_BUILD_TYPE=Release \
    -DDEFAULT_INSTALL_PATH=${MINGW_PREFIX} \
    -DOPENSSL_ROOT_DIR=${MINGW_PREFIX} \
    -DwxWidgets_CONFIG_EXECUTABLE=${MINGW_PREFIX}/bin/wx-config-${_wx_basever} \
    -DKICAD_USE_OCC="$( [[ ${MINGW_PACKAGE_PREFIX} == *-clang-aarch64* ]] && echo "OFF" || echo "ON" )" \
    -DOCC_INCLUDE_DIR=${MINGW_PREFIX}/include/opencascade \
    -DKICAD_SCRIPTING=ON \
    -DKICAD_SCRIPTING_MODULES=ON \
    -DKICAD_SCRIPTING_PYTHON3=ON \
    -DKICAD_SCRIPTING_WXPYTHON=ON \
    -DKICAD_SCRIPTING_WXPYTHON_PHOENIX=ON \
    -DPYTHON_EXECUTABLE=${MINGW_PREFIX}/bin/python.exe \
    -DPYTHON_INCLUDE_DIR=$(${MINGW_PREFIX}/bin/python.exe -c "from sysconfig import get_paths as gp; print(gp()[\"include\"])") \
    -DPYTHON_ROOT_DIR=${MINGW_PREFIX} \
    ../${_realname}-${pkgver}

  mingw32-make VERBOSE=1

  cd "${srcdir}"
  msg2 "Build translations"
  [[ -d build-i18n ]] && rm -rf build-i18n
  mkdir -p build-i18n && cd build-i18n

  MSYS2_ARG_CONV_EXCL="-DCMAKE_INSTALL_PREFIX=" \
  cmake \
    -G "MinGW Makefiles" \
    -DCMAKE_INSTALL_PREFIX=${MINGW_PREFIX} \
    ../${_realname}-i18n-${pkgver}

  if [ "$_build_support_libraries" == "yes" ]; then
    for _s in ${_sub[@]}; do
      cd ${srcdir}
      msg2 "Build ${_s}"
      [[ -d build-${_s} ]] && rm -rf build-${_s}
      mkdir -p build-${_s} && cd build-${_s}

      MSYS2_ARG_CONV_EXCL="-DCMAKE_INSTALL_PREFIX=" \
      cmake \
        -G "MinGW Makefiles" \
        -DCMAKE_INSTALL_PREFIX=${MINGW_PREFIX} \
      ../${_realname}-${_s}-${pkgver}
    done
  fi
}

for _doclang in ${_doc[@]}; do _doc_pkg+=("\"${MINGW_PACKAGE_PREFIX}-${_realname}-doc-${_doclang}: Documentation for KiCad (mingw-w64)\""); done
for _feature in ${_sub[@]}; do _sub_pkg+=("\"${MINGW_PACKAGE_PREFIX}-${_realname}-${_feature}\""); done

eval "package_${MINGW_PACKAGE_PREFIX}-${_realname}() {

  msg2 \"Package kicad\"
  optdepends+=(${_doc_pkg[@]} ${_sub_pkg[@]})
  conflicts=(${MINGW_PACKAGE_PREFIX}-${_realname}-git)
  replaces=(${MINGW_PACKAGE_PREFIX}-${_realname}-git)

  cd \${srcdir}/build-${MSYSTEM}
  mingw32-make DESTDIR=\${pkgdir} install

  cd \${srcdir}/build-i18n
  mingw32-make DESTDIR=\${pkgdir} install
}"

eval "package_${MINGW_PACKAGE_PREFIX}-${_realname}-meta() {
  depends=(${MINGW_PACKAGE_PREFIX}-${_realname}
           ${_sub_pkg[@]})
}"

for _part in ${_sub[@]}; do
  eval "package_${MINGW_PACKAGE_PREFIX}-${_realname}-${_part}() {
    options=('!strip')
    depends=(${MINGW_PACKAGE_PREFIX}-${_realname})
    conflicts=(${MINGW_PACKAGE_PREFIX}-${_realname}-${_part}-git)
    replaces=(${MINGW_PACKAGE_PREFIX}-${_realname}-${_part}-git)
    msg2 \"Package ${_part}\"
    cd \${srcdir}/build-${_part}
    mingw32-make DESTDIR=\${pkgdir} install
  }"
done
