# Maintainer: Chris Gorman <chrisjohgorman@gmail.com>

_realname=libuhd
pkgbase=mingw-w64-${_realname}
pkgname=("${MINGW_PACKAGE_PREFIX}-${_realname}")
pkgver=4.6.0.0
pkgrel=1
pkgdesc="Universal Software Radio Peripheral (USRP) userspace driver (mingw-w64)"
arch=('any')
mingw_arch=('mingw64' 'ucrt64' 'clang64' 'clangarm64')
url='https://files.ettus.com/manual/'
license=('GPL')
depends=("${MINGW_PACKAGE_PREFIX}-boost"
	 "${MINGW_PACKAGE_PREFIX}-orc"
	 "${MINGW_PACKAGE_PREFIX}-libusb")
makedepends=("${MINGW_PACKAGE_PREFIX}-cmake"
             "${MINGW_PACKAGE_PREFIX}-ninja"
             "${MINGW_PACKAGE_PREFIX}-cc"
             "${MINGW_PACKAGE_PREFIX}-python-setuptools"
             "${MINGW_PACKAGE_PREFIX}-python-mako"
             "${MINGW_PACKAGE_PREFIX}-python-numpy")
source=("libuhd-$pkgver.tar.gz::https://github.com/EttusResearch/uhd/archive/v$pkgver.tar.gz"
	0001-libraries_and_headers.patch
	0002-mpmd_image_loader_cpp.patch
	0003-x300_image_loader_cpp.patch
	0004-octoclock_image_loader_cpp.patch
    0005-disable_phtread_set_name_np.patch)
sha256sums=('5e6eb05abb4a3973bef8837fb45a5147be04698229e22801369f728fcc6db38d'
            '2f46b95956b0e157dd338a3776011de354052b6c2b2e7eee37e9e39ab327bafc'
            'c46f5a054f6fb891a49dfc07f2f819310cb578df636b3b3edd9804a146d7b8fd'
            'e3468d6bec2f8ffde6db1360070158777fd69e4dd200b43f420b3a16b68fd17d'
            '85f427cf117b2fd24d5dd3cfdca1c3e4d21d57dcb77576fb3c6ae9579880c9d3'
            'fc9d509ad1ea5869b74e819020d8d2464191ac68ac1bfa08683d4f0189318feb')

prepare() {
  cd "${srcdir}"/uhd-${pkgver}

  patch -Np1 -i "${srcdir}"/0001-libraries_and_headers.patch
  patch -Np1 -i "${srcdir}"/0002-mpmd_image_loader_cpp.patch
  patch -Np1 -i "${srcdir}"/0003-x300_image_loader_cpp.patch
  patch -Np1 -i "${srcdir}"/0004-octoclock_image_loader_cpp.patch
  patch -Np1 -i "${srcdir}"/0005-disable_phtread_set_name_np.patch
}

build() {
  local _site_packages=$(${MINGW_PREFIX}/bin/python -c "import site; a = site.getsitepackages()[0].split('/')[3:]; b = '/'.join(a); print(b)")

  declare -a extra_config
  if check_option "debug" "n"; then
    extra_config+=("-DCMAKE_BUILD_TYPE=Release")
  else
    extra_config+=("-DCMAKE_BUILD_TYPE=Debug")
  fi

  MSYS2_ARG_CONV_EXCL="-DCMAKE_INSTALL_PREFIX=" \
    "${MINGW_PREFIX}"/bin/cmake.exe \
      -GNinja \
      -DCMAKE_INSTALL_PREFIX="${MINGW_PREFIX}" \
      -DPYTHON_EXECUTABLE="${MINGW_PREFIX}"/bin/python \
      -DENABLE_EXAMPLES=ON \
      -DENABLE_PYTHON_API=ON \
      -DUHD_PYTHON_DIR="${_site_packages}" \
      -DENABLE_UTILS=ON \
      -DENABLE_TESTS=OFF \
      -DENABLE_E100=ON \
      -DENABLE_E300=ON \
      "${extra_config[@]}" \
      -S "uhd-${pkgver}/host" \
      -B "build-${MSYSTEM}"

  "${MINGW_PREFIX}"/bin/cmake.exe --build "build-${MSYSTEM}"
}

check() {
  "${MINGW_PREFIX}"/bin/cmake.exe --build "build-${MSYSTEM}" --target test
}

package() {
  DESTDIR="${pkgdir}" "${MINGW_PREFIX}"/bin/cmake.exe --install "build-${MSYSTEM}"

}
