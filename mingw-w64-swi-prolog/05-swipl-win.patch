--- swipl-8.4.3/cmake/WindowsTargets.cmake.orig	2022-06-21 13:08:37.000000000 +0200
+++ swipl-8.4.3/cmake/WindowsTargets.cmake	2022-07-17 11:19:02.809335500 +0200
@@ -4,10 +4,10 @@
 add_subdirectory(win32/console)
 
 # build swipl-win.exe
-add_executable(swipl-win WIN32
+add_executable(swipl-win32 WIN32
 	       pl-ntmain.c swipl.rc)
-target_c_stack(swipl-win 4000000)
-target_link_libraries(swipl-win libswipl libplterm ${CMAKE_THREAD_LIBS_INIT})
-target_include_directories(swipl-win BEFORE PRIVATE
+target_c_stack(swipl-win32 4000000)
+target_link_libraries(swipl-win32 libswipl libplterm ${CMAKE_THREAD_LIBS_INIT})
+target_include_directories(swipl-win32 BEFORE PRIVATE
 			   ${CMAKE_CURRENT_BINARY_DIR}
 			   ${CMAKE_CURRENT_SOURCE_DIR})
diff -urN swipl-8.4.3/src/CMakeLists.txt.orig swipl-8.4.3/src//CMakeLists.txt
--- swipl-8.4.3/src/CMakeLists.txt.orig	2022-07-17 11:22:36.303592200 +0200
+++ swipl-8.4.3/src//CMakeLists.txt	2022-07-17 11:26:44.596381900 +0200
@@ -660,7 +660,7 @@
 endif()
 
 if(WIN32)
-install(TARGETS swipl-win
+install(TARGETS swipl-win32
 	RUNTIME DESTINATION ${SWIPL_INSTALL_ARCH_EXE}
         LIBRARY DESTINATION ${SWIPL_INSTALL_ARCH_LIB}
 )
diff -urN swipl-8.4.3/packages/swipl-win/CMakeLists.txt.orig swipl-8.4.3/packages/swipl-win/CMakeLists.txt
--- swipl-8.4.3/packages/swipl-win/CMakeLists.txt.orig	2022-02-04 10:24:15.000000000 +0100
+++ swipl-8.4.3/packages/swipl-win/CMakeLists.txt	2022-07-17 11:47:14.330193900 +0200
@@ -91,7 +91,12 @@
 	  DESTINATION ${SWIPL_INSTALL_RESOURCES})
 endif()
 
-if(NOT WIN32 AND NOT BUILD_MACOS_BUNDLE)
+if(WIN32)
+  # Create shell script
+  file(WRITE ${CMAKE_CURRENT_SOURCE_DIR}/swipl-win
+       "#!/usr/bin/bash\n${CMAKE_INSTALL_PREFIX}/${SWIPL_INSTALL_ARCH_EXE}/swipl-win $@\n")
+  install(PROGRAMS ${CMAKE_CURRENT_SOURCE_DIR}/swipl-win DESTINATION bin)
+elseif(NOT BUILD_MACOS_BUNDLE)
 # Create symbolic link from public installation dir to executables
 install(DIRECTORY DESTINATION bin)
 ilink(${CMAKE_INSTALL_PREFIX}/${SWIPL_INSTALL_ARCH_EXE}/swipl-win

--- swipl-8.4.3/packages/swipl-win/pqConsole.cpp	2022-02-04 10:24:15.000000000 +0100
+++ swipl-8.4.3/packages/swipl-win/pqConsole.cpp	2022-07-19 11:56:19.606385700 +0200
@@ -259,13 +259,13 @@
     while (options.next(opt)) {
         O o = O(opt.arity(), opt.name());
         if (o == O(2, "size")) {
-            long W = opt[1], H = opt[2];
+            long W = opt.operator[](1), H = opt.operator[](2);
             QSize sz = c->fontMetrics().size(0, "Q");
             w->resize(sz.width() * W, sz.height() * H);
             continue;
         }
         if (o == O(2, "position")) {
-            long X = opt[1], Y = opt[2];
+            long X = opt.operator[](1), Y = opt.operator[](2);
             w->move(X, Y);
             continue;
         }
@@ -275,7 +275,7 @@
             continue;
         }
         if (o == O(1, "show")) {
-            bool y = QString(opt[1].name()) == "true";
+            bool y = QString(opt.operator[](1).name()) == "true";
             if (y)
                 w->show();
             else
@@ -348,8 +348,8 @@
             PL_A2[2].type() == PL_LIST &&
             PL_A4.type() == PL_LIST */ )
         {
-            Label = t2w(PL_A2[1]);
-            PlTail labels(PL_A2[2]), actions(PL_A4);
+            Label = t2w(PL_A2.operator[](1));
+            PlTail labels(PL_A2.operator[](2)), actions(PL_A4);
             PlTerm label, action;
             while (labels.next(label) && actions.next(action))
                 lab_act.append(qMakePair(t2w(label), t2w(action)));
@@ -586,15 +586,15 @@
             if (Option.arity() == 1) {
                 QString name = Option.name();
                 if (name == "title")
-                    Title = t2w(Option[1]);
+                    Title = t2w(Option.operator[](1));
                 if (name == "icon")
-                    Icon = Option[1];
+                    Icon = Option.operator[](1);
                 if (name == "image")
-                    Image = t2w(Option[1]);
+                    Image = t2w(Option.operator[](1));
                 if (name == "image_scale")
-                    scale = double(Option[1]);
+                    scale = double(Option.operator[](1));
                 if (name == "min_width")
-                    min_width = int(Option[1]);
+                    min_width = int(Option.operator[](1));
             }
             else
                 throw PlException(A(c->tr("option %1 : invalid arity").arg(t2w(Option))));
@@ -679,7 +679,7 @@
         PlTerm opt;
         for (PlTail opts(PL_A1); opts.next(opt); ) {
             if (opt.arity() == 1)
-                unify(opt.name(), c, opt[1]);
+                unify(opt.name(), c, opt.operator[](1));
             else
                 throw PlException(A(c->tr("%1: properties have arity 1").arg(t2w(opt))));
         }
@@ -917,7 +917,7 @@
     if (c) {
         PlTerm rgb = PL_A2;
         if (rgb.name() == QStringLiteral("rgb")) {
-            int r = rgb[1], g = rgb[2], b = rgb[3];
+            int r = rgb.operator[](1), g = rgb.operator[](2), b = rgb.operator[](3);
             QRgb val = qRgb(r, g, b);
             auto which = t2w(PL_A1);
 
