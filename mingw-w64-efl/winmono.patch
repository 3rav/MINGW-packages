diff --git a/meson.build b/meson.build
index 0b9a451e0e..61f35381a9 100644
--- a/meson.build
+++ b/meson.build
@@ -118,6 +118,7 @@ if sys_windows
     error('Version of targetted Windows incorrect')
   endif
   add_project_arguments('-D__USE_MINGW_ANSI_STDIO', language: langs)
+  add_global_arguments('-define:WIN32', language: 'cs')
 endif
 
 if sys_sun
diff --git a/src/bindings/mono/efl_mono/meson.build b/src/bindings/mono/efl_mono/meson.build
index 5ca6f116d6..abc78b5232 100644
--- a/src/bindings/mono/efl_mono/meson.build
+++ b/src/bindings/mono/efl_mono/meson.build
@@ -14,17 +14,25 @@ map = run_command('map_generate.sh').stdout()
 
 efl_libs = configuration_data()
 efl_libs.set('EFL_MONO_LIBRARY_MAP', map)
-efl_libs.set('CUSTOM_EXPORTS_MONO_DL_MONO', 'eflcustomexportsmono')
 efl_libs.set('EVIL_DL_MONO', 'dl')
 if sys_osx
   efl_libs.set('LIBDL_DL_MONO', 'dl.dylib')
+  efl_libs.set('CUSTOM_EXPORTS_MONO_DL_MONO', 'eflcustomexportsmono')
+elif sys_windows
+  efl_libs.set('LIBDL_DL_MONO', 'libdl.dll')
+  efl_libs.set('CUSTOM_EXPORTS_MONO_DL_MONO', 'libeflcustomexportsmono' + '-' + version_major)
 else
   efl_libs.set('LIBDL_DL_MONO', 'libdl.so')
+  efl_libs.set('CUSTOM_EXPORTS_MONO_DL_MONO', 'eflcustomexportsmono')
 endif
 
 foreach mono_libs : mono_sublibs
   key = mono_libs[0].to_upper()+'_DL_MONO'
-  efl_libs.set(key, mono_libs[0].to_lower())
+  if target_machine.system() == 'windows'
+    efl_libs.set(key, 'lib' + mono_libs[0].to_lower() + '-' + version_major)
+  else
+    efl_libs.set(key, mono_libs[0].to_lower())
+  endif
 endforeach
 
 configure_file(
diff --git a/src/bindings/mono/efl_sharp.csproj.in b/src/bindings/mono/efl_sharp.csproj.in
index e03be33950..640207db71 100644
--- a/src/bindings/mono/efl_sharp.csproj.in
+++ b/src/bindings/mono/efl_sharp.csproj.in
@@ -17,12 +17,13 @@
   <!-- </PropertyGroup> -->
   <PropertyGroup>
     <DefineConstants>@EFL_BETA@</DefineConstants>
+    <DefineConstants>@EFL_WIN32@</DefineConstants>
   </PropertyGroup>
 
   <ItemGroup>
     <Compile Include="@BINDING_SRC@/efl_mono/*.cs" />
     <!-- FIXME Windows support -->
-    <Compile Include="@BINDING_SRC@/eo_mono/*.cs" Exclude="@BINDING_SRC@/eo_mono/*Windows.cs" />
+    <Compile Include="@BINDING_SRC@/eo_mono/*.cs" />
     <Compile Include="@BINDING_SRC@/eina_mono/*.cs" />
     <Compile Include="@BINDING_SRC@/eolian_mono/*.cs" />
     <Compile Include="@BINDING_SRC@/eldbus_mono/*.cs" />
diff --git a/src/bindings/mono/eo_mono/FunctionWrapper_Unix.cs b/src/bindings/mono/eo_mono/FunctionWrapper_Unix.cs
index 636f83ebb1..604fbee111 100644
--- a/src/bindings/mono/eo_mono/FunctionWrapper_Unix.cs
+++ b/src/bindings/mono/eo_mono/FunctionWrapper_Unix.cs
@@ -13,6 +13,8 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+#if !WIN32
+
 using System;
 using System.Runtime.InteropServices;
 
@@ -40,3 +42,5 @@ internal static partial class FunctionInterop
 }
 
 }
+
+#endif
\ No newline at end of file
diff --git a/src/bindings/mono/eo_mono/FunctionWrapper_Windows.cs b/src/bindings/mono/eo_mono/FunctionWrapper_Windows.cs
index 1ff7627a2f..c0708d7b27 100644
--- a/src/bindings/mono/eo_mono/FunctionWrapper_Windows.cs
+++ b/src/bindings/mono/eo_mono/FunctionWrapper_Windows.cs
@@ -13,19 +13,26 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
+#if WIN32
+
 using System;
 using System.Runtime.InteropServices;
 
 namespace Efl.Eo
 {
 
-static partial class FunctionInterop
+internal static partial class FunctionInterop
 {
-    [DllImport(efl.Libs.Libdl)]
+    [DllImport(efl.Libs.Kernel32, CharSet = CharSet.Ansi, ExactSpelling = true, SetLastError = true)]
     internal static extern IntPtr GetProcAddress(IntPtr handle, string symbol);
 
-    private static IntPtr LoadFunctionPointer(IntPtr nativeLibraryHandle, string functionName)
-        => FunctionInterop.GetProcAddress(nativeLibraryHandle, functionName);
+    private static IntPtr dlsym(IntPtr handle, string symbol) => FunctionInterop.GetProcAddress(handle, symbol);
+
+    internal static IntPtr LoadFunctionPointer(IntPtr nativeLibraryHandle, string functionName) =>
+        FunctionInterop.GetProcAddress(nativeLibraryHandle, functionName);
 }
 
 }
+
+#endif
\ No newline at end of file
diff --git a/src/bindings/mono/eo_mono/NativeModule_Unix.cs b/src/bindings/mono/eo_mono/NativeModule_Unix.cs
index b4dfeb8aea..7059715062 100644
--- a/src/bindings/mono/eo_mono/NativeModule_Unix.cs
+++ b/src/bindings/mono/eo_mono/NativeModule_Unix.cs
@@ -13,6 +13,8 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+#if !WIN32
+
 using System;
 using System.Runtime.InteropServices;
 
@@ -98,3 +100,5 @@ internal partial class NativeModule
 }
 
 }
+
+#endif
\ No newline at end of file
diff --git a/src/bindings/mono/eo_mono/NativeModule_Windows.cs b/src/bindings/mono/eo_mono/NativeModule_Windows.cs
index 513eb723e1..88d7d3d363 100644
--- a/src/bindings/mono/eo_mono/NativeModule_Windows.cs
+++ b/src/bindings/mono/eo_mono/NativeModule_Windows.cs
@@ -13,16 +13,32 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+#if WIN32
+
 using System;
 using System.Runtime.InteropServices;
 
 namespace Efl.Eo
 {
 
-internal class partial NativeModule
+internal partial class NativeModule
 {
-   [DllImport(efl.Libs.Kernel32, CharSet = CharSet.Unicode, SetLastError = true)]
-   internal static extern IntPtr LoadLibrary(string libFilename);
+    [DllImport(efl.Libs.Kernel32, EntryPoint = "LoadLibrary", CharSet = CharSet.Unicode, SetLastError = true)]
+    private static extern IntPtr _LoadLibrary(string libFilename);
+
+    internal static IntPtr LoadLibrary(string libFilename)
+    {
+        if (!libFilename.StartsWith("lib"))
+        {
+                libFilename = "lib" + libFilename + "-1";
+        }
+        return NativeModule._LoadLibrary(libFilename);
+    }
+
+    [DllImport(efl.Libs.Kernel32, CharSet = CharSet.Unicode, SetLastError = true)]
+    internal static extern void UnloadLibrary(IntPtr handle);
 }
 
 }
+
+#endif
\ No newline at end of file
diff --git a/src/bindings/mono/eo_mono/meson.build b/src/bindings/mono/eo_mono/meson.build
index 013b1cc97f..719d575486 100644
--- a/src/bindings/mono/eo_mono/meson.build
+++ b/src/bindings/mono/eo_mono/meson.build
@@ -4,11 +4,9 @@ mono_files += files(
   'FunctionWrapper.cs',
   'NativeModule.cs',
   'EoWrapper.cs',
-  'WrapperSupervisor.cs'
+  'WrapperSupervisor.cs',
+  'FunctionWrapper_Windows.cs',
+  'NativeModule_Windows.cs',
+  'FunctionWrapper_Unix.cs',
+  'NativeModule_Unix.cs'
 )
-
-if host_machine.system() == 'windows'
-   mono_files += files('FunctionWrapper_Windows.cs', 'NativeModule_Windows.cs')
-else
-   mono_files += files('FunctionWrapper_Unix.cs', 'NativeModule_Unix.cs')
-endif
diff --git a/src/bindings/mono/meson.build b/src/bindings/mono/meson.build
index 74f2d06de7..111eb911ea 100644
--- a/src/bindings/mono/meson.build
+++ b/src/bindings/mono/meson.build
@@ -81,6 +81,11 @@ foreach lib : mono_sublibs
   package_name = lib[0].to_lower()
   eo_file_subdirs = get_variable(package_name + '_eo_subdirs')
   file_location = join_paths('..', '..', 'lib', package_name)
+  dllimport = package_name
+
+  if target_machine.system() == 'windows'
+    dllimport = 'lib' + dllimport + '-' + version_major
+  endif
 
   if (package_name != 'eldbus')
     foreach eo_file_subdir : eo_file_subdirs
@@ -101,7 +106,7 @@ foreach lib : mono_sublibs
             input : join_paths(subdir_file_location, mono_gen_file),
             output : [mono_gen_file + '.cs'],
             command : [eolian_mono_gen, beta_option, '-I', meson.current_source_dir(), eolian_include_directories,
-                                       '--dllimport', package_name,
+                                       '--dllimport', dllimport,
                                        '-o', join_paths(meson.current_build_dir(), mono_gen_file + '.cs'),
                                        '-e', get_option('mono-examples-dir'), partial,
                                        '@INPUT@'])
@@ -211,7 +216,22 @@ if (get_option('dotnet'))
   # The major version should be enough for now while we don't have to deal
   # with minor differences and dotnet core is far from version 10
   dotnet_major_version = dotnet_version.stdout().strip()[0].to_int()
-  if dotnet_major_version == 3
+  if dotnet_major_version == 8
+    dotnet_core_app_version = '8.0'
+    dotnet_standard_version = '2.1'
+  elif dotnet_major_version == 7
+    dotnet_core_app_version = '7.0'
+    dotnet_standard_version = '2.1'
+  elif dotnet_major_version == 6
+    dotnet_core_app_version = '6.0'
+    dotnet_standard_version = '2.1'
+  elif dotnet_major_version == 5
+    dotnet_core_app_version = '5.0'
+    dotnet_standard_version = '2.1'
+  elif dotnet_major_version == 4
+    dotnet_core_app_version = '4.0'
+    dotnet_standard_version = '2.1'
+  elif dotnet_major_version == 3
     dotnet_core_app_version = '3.0'
     dotnet_standard_version = '2.1'
   elif dotnet_major_version == 2
@@ -232,6 +252,13 @@ if (get_option('dotnet'))
     lib_csproj_conf_data.set('EFL_BETA', '')
   endif
 
+  if target_machine.system() == 'windows'
+    lib_csproj_conf_data.set('EFL_WIN32', 'WIN32')
+  else
+    lib_csproj_conf_data.set('EFL_WIN32', '')
+  endif
+
+
   lib_csproj = configure_file(input: 'efl_sharp.csproj.in',
                               output: 'efl_sharp.csproj',
                               configuration: lib_csproj_conf_data)
