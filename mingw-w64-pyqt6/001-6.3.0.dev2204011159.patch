diff -Nur PyQt6-6.2.3/ChangeLog PyQt6-6.3.0.dev2204011159/ChangeLog
--- PyQt6-6.2.3/ChangeLog	2022-02-01 15:19:39.651820400 +0100
+++ PyQt6-6.3.0.dev2204011159/ChangeLog	2022-04-02 01:31:15.000000000 +0200
@@ -1,5 +1,57 @@
+2022-04-01  Phil Thompson  <phil@riverbankcomputing.com>
+
+	* PyQt6.msp:
+	Fixes for when building without protected being public.
+	[373bc2a6447e] [tip]
+
+	* NEWS, project.py, qpy/QtCore/qpycore_post_init.cpp,
+	qpy/QtCore/qpycore_post_init.cpp.in:
+	Removed some legacy SIP v4 support.
+	[184d70406908]
+
+2022-03-31  Phil Thompson  <phil@riverbankcomputing.com>
+
+	* PyQt6.msp:
+	Updated the remaining modules for Qt v6.3.0rc.
+	[1c4354d61062]
+
+	* PyQt6.msp:
+	Updated QtHelp, QtMultimedia, QtMultimediaWidgets and QtNetwork for
+	Qt v6.3.0rc.
+	[0566b82df55b]
+
+	* PyQt6.msp, qpy/QtBluetooth/qpybluetooth_qmultihash.sip:
+	Updated QtBluetooth, QtDBus, QtDesigner and QtGui for Qt v6.3.0rc.
+	[cd140f0de691]
+
+	* NEWS, PyQt6.msp:
+	Updated QtCore for Qt v6.3.0rc.
+	[a87a5ea93c97]
+
+2022-03-28  Phil Thompson  <phil@riverbankcomputing.com>
+
+	* NEWS:
+	Merged the 6.2-maint branch.
+	[962af9bda6d0]
+
+2022-03-18  Phil Thompson  <phil@riverbankcomputing.com>
+
+	* NEWS, qpy/QtCore/qpycore_pyqtslot.cpp:
+	Keep a strong reference to methods when they are used as slots.
+	[d70742ec07e0] <6.2-maint>
+
+2022-02-26  Phil Thompson  <phil@riverbankcomputing.com>
+
+	* NEWS, qpy/QtQml/qpyqml_listdata.cpp:
+	Fixed a bug in the tidying up of QQmlListProperty.
+	[3ce5cad6fbfe] <6.2-maint>
+
 2022-02-01  Phil Thompson  <phil@riverbankcomputing.com>
 
+	* .hgtags:
+	Added tag 6.2.3 for changeset bf840012bc47
+	[76ccb7cf3d45] <6.2-maint>
+
 	* qpy/QtCore/qpycore_pyqtpyobject.cpp,
 	qpy/QtCore/qpycore_pyqtpyobject.h:
 	Explicitly support comparisons of Python objects wrapped in a
diff -Nur PyQt6-6.2.3/NEWS PyQt6-6.3.0.dev2204011159/NEWS
--- PyQt6-6.2.3/NEWS	2022-02-01 15:19:39.653347500 +0100
+++ PyQt6-6.3.0.dev2204011159/NEWS	2022-04-02 01:31:15.000000000 +0200
@@ -1,3 +1,7 @@
+v6.3.0 1st April 2022
+  - Added support for Qt v6.3.
+  - Bug fixes.
+
 v6.2.3 1st February 2022
   - All Qt.GestureType callable arguments will also accept an int.  All
     callables that return a Qt::GestureType in C++ will return an int (which
diff -Nur PyQt6-6.2.3/PKG-INFO PyQt6-6.3.0.dev2204011159/PKG-INFO
--- PyQt6-6.2.3/PKG-INFO	2022-02-01 15:19:47.802954200 +0100
+++ PyQt6-6.3.0.dev2204011159/PKG-INFO	2022-04-02 01:31:15.000000000 +0200
@@ -1,6 +1,6 @@
 Metadata-Version: 2.1
 Name: PyQt6
-Version: 6.2.3
+Version: 6.3.0.dev2204011159
 Requires-Python: >=3.6.1
 Summary: Python bindings for the Qt cross platform application toolkit
 Home-Page: https://www.riverbankcomputing.com/software/pyqt/
diff -Nur PyQt6-6.2.3/project.py PyQt6-6.3.0.dev2204011159/project.py
--- PyQt6-6.2.3/project.py	2022-02-01 15:19:39.891359800 +0100
+++ PyQt6-6.3.0.dev2204011159/project.py	2022-04-02 01:31:15.000000000 +0200
@@ -508,51 +508,6 @@
 
         super().__init__(project, 'QtCore', qmake_QT=['-gui'])
 
-    def generate(self):
-        """ Generate the bindings source code and return the corresponding
-        buildable.
-        """
-
-        # This is re-implemented so that we can update the buildable to include
-        # the embedded sip flags.  Note that this support is deprecated and can
-        # be removed once support for sip4 has been dropped.
-
-        project = self.project
-
-        # The embedded flags.
-        sip_flags = ['-n', project.sip_module]
-
-        if project.py_debug:
-            sip_flags.append('-D')
-
-        for tag in self.tags:
-            sip_flags.append('-t')
-            sip_flags.append(tag)
-
-        for bindings in project.bindings.values():
-            for feature in bindings.disabled_features:
-                sip_flags.append('-x')
-                sip_flags.append(feature)
-
-        buildable = super().generate()
-
-        cpp = 'qpycore_post_init.cpp'
-        in_path = os.path.join(project.root_dir, 'qpy', 'QtCore', cpp + '.in')
-        out_path = os.path.join(buildable.build_dir, cpp)
-
-        out_f = project.open_for_writing(out_path)
-
-        with open(in_path) as in_f:
-            code = in_f.read()
-            code = code.replace('@@PYQT_SIP_FLAGS@@', ' '.join(sip_flags))
-            out_f.write(code)
-
-        out_f.close()
-
-        buildable.sources.append(cpp)
-
-        return buildable
-
     def handle_test_output(self, test_output):
         """ Handle the output from the external test program and return True if
         the bindings are buildable.
diff -Nur PyQt6-6.2.3/pyproject.toml PyQt6-6.3.0.dev2204011159/pyproject.toml
--- PyQt6-6.2.3/pyproject.toml	2022-02-01 15:19:39.891703000 +0100
+++ PyQt6-6.3.0.dev2204011159/pyproject.toml	2022-04-02 01:31:15.000000000 +0200
@@ -6,7 +6,7 @@
 # Specify the PEP 566 metadata for the project.
 [tool.sip.metadata]
 name = "PyQt6"
-version = "6.2.3"
+version = "6.3.0.dev2204011159"
 summary = "Python bindings for the Qt cross platform application toolkit"
 home-page = "https://www.riverbankcomputing.com/software/pyqt/"
 author = "Riverbank Computing Limited"
diff -Nur PyQt6-6.2.3/qpy/QtCore/qpycore_post_init.cpp PyQt6-6.3.0.dev2204011159/qpy/QtCore/qpycore_post_init.cpp
--- PyQt6-6.2.3/qpy/QtCore/qpycore_post_init.cpp	1970-01-01 01:00:00.000000000 +0100
+++ PyQt6-6.3.0.dev2204011159/qpy/QtCore/qpycore_post_init.cpp	2022-04-02 01:31:15.000000000 +0200
@@ -0,0 +1,111 @@
+// This is the post-initialisation support code for the QtCore module.
+//
+// Copyright (c) 2022 Riverbank Computing Limited <info@riverbankcomputing.com>
+// 
+// This file is part of PyQt6.
+// 
+// This file may be used under the terms of the GNU General Public License
+// version 3.0 as published by the Free Software Foundation and appearing in
+// the file LICENSE included in the packaging of this file.  Please review the
+// following information to ensure the GNU General Public License version 3.0
+// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
+// 
+// If you do not wish to use this file under the terms of the GPL version 3.0
+// then you may purchase a commercial license.  For more information contact
+// info@riverbankcomputing.com.
+// 
+// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
+// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
+
+
+#include <Python.h>
+
+#include <QRecursiveMutex>
+
+#include "qpycore_api.h"
+#include "qpycore_event_handlers.h"
+#include "qpycore_objectified_strings.h"
+#include "qpycore_pyqtboundsignal.h"
+#include "qpycore_pyqtmethodproxy.h"
+#include "qpycore_pyqtproperty.h"
+#include "qpycore_pyqtpyobject.h"
+#include "qpycore_pyqtsignal.h"
+#include "qpycore_pyqtslotproxy.h"
+#include "qpycore_types.h"
+
+#include "sipAPIQtCore.h"
+
+
+// The objectified strings.
+PyObject *qpycore_dunder_name;
+PyObject *qpycore_dunder_mro;
+PyObject *qpycore_dunder_pyqtsignature;
+
+
+// Perform any required post-initialisation.
+void qpycore_post_init(PyObject *module_dict)
+{
+    // Register the event handlers.
+    qpycore_register_event_handlers();
+
+    // Initialise the pyqtProperty type and add it to the module dictionary.
+    if (!qpycore_pyqtProperty_init_type())
+        Py_FatalError("PyQt6.QtCore: Failed to initialise pyqtProperty type");
+
+    if (PyDict_SetItemString(module_dict, "pyqtProperty",
+                (PyObject *)qpycore_pyqtProperty_TypeObject) < 0)
+        Py_FatalError("PyQt6.QtCore: Failed to set pyqtProperty type");
+
+    // Initialise the pyqtSignal type and add it to the module dictionary.
+    if (!qpycore_pyqtSignal_init_type())
+        Py_FatalError("PyQt6.QtCore: Failed to initialise pyqtSignal type");
+
+    if (PyDict_SetItemString(module_dict, "pyqtSignal",
+                (PyObject *)qpycore_pyqtSignal_TypeObject) < 0)
+        Py_FatalError("PyQt6.QtCore: Failed to set pyqtSignal type");
+
+    // Initialise the pyqtBoundSignal type and add it to the module dictionary.
+    if (!qpycore_pyqtBoundSignal_init_type())
+        Py_FatalError("PyQt6.QtCore: Failed to initialise pyqtBoundSignal type");
+
+    if (PyDict_SetItemString(module_dict, "pyqtBoundSignal",
+                (PyObject *)qpycore_pyqtBoundSignal_TypeObject) < 0)
+        Py_FatalError("PyQt6.QtCore: Failed to set pyqtBoundSignal type");
+
+    // Initialise the private pyqtMethodProxy type.
+    if (!qpycore_pyqtMethodProxy_init_type())
+        Py_FatalError("PyQt6.QtCore: Failed to initialise pyqtMethodProxy type");
+
+    // Register the C++ type that wraps Python objects.
+    qRegisterMetaType<PyQt_PyObject>("PyQt_PyObject");
+
+    // Register the lazy attribute getter.
+    if (sipRegisterAttributeGetter(sipType_QObject, qpycore_get_lazy_attr) < 0)
+        Py_FatalError("PyQt6.QtCore: Failed to register attribute getter");
+
+    // Objectify some strings.
+    qpycore_dunder_name = PyUnicode_FromString("__name__");
+
+    if (!qpycore_dunder_name)
+        Py_FatalError("PyQt6.QtCore: Failed to objectify '__name__'");
+
+    qpycore_dunder_mro = PyUnicode_FromString("__mro__");
+
+    if (!qpycore_dunder_mro)
+        Py_FatalError("PyQt6.QtCore: Failed to objectify '__mro__'");
+
+    qpycore_dunder_pyqtsignature = PyUnicode_FromString("__pyqtSignature__");
+
+    if (!qpycore_dunder_pyqtsignature)
+        Py_FatalError("PyQt6.QtCore: Failed to objectify '__pyqtSignature__'");
+
+    // Create the mutex that serialises access to the slot proxies.  We don't
+    // use a statically initialised one because Qt needs some things to be
+    // initialised first (at least for Windows) and this is the only way to
+    // guarantee things are done in the right order.
+    PyQtSlotProxy::mutex = new QRecursiveMutex();
+
+    // Load the embedded qt.conf file if there is a bundled copy of Qt.
+    if (!qpycore_qt_conf())
+        Py_FatalError("PyQt6.QtCore: Unable to embed qt.conf");
+}
diff -Nur PyQt6-6.2.3/qpy/QtCore/qpycore_post_init.cpp.in PyQt6-6.3.0.dev2204011159/qpy/QtCore/qpycore_post_init.cpp.in
--- PyQt6-6.2.3/qpy/QtCore/qpycore_post_init.cpp.in	2022-02-01 15:19:39.675511600 +0100
+++ PyQt6-6.3.0.dev2204011159/qpy/QtCore/qpycore_post_init.cpp.in	1970-01-01 01:00:00.000000000 +0100
@@ -1,111 +0,0 @@
-// This is the post-initialisation support code for the QtCore module.
-//
-// Copyright (c) 2022 Riverbank Computing Limited <info@riverbankcomputing.com>
-// 
-// This file is part of PyQt6.
-// 
-// This file may be used under the terms of the GNU General Public License
-// version 3.0 as published by the Free Software Foundation and appearing in
-// the file LICENSE included in the packaging of this file.  Please review the
-// following information to ensure the GNU General Public License version 3.0
-// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
-// 
-// If you do not wish to use this file under the terms of the GPL version 3.0
-// then you may purchase a commercial license.  For more information contact
-// info@riverbankcomputing.com.
-// 
-// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
-// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
-
-
-#include <Python.h>
-
-#include <QRecursiveMutex>
-
-#include "qpycore_api.h"
-#include "qpycore_event_handlers.h"
-#include "qpycore_objectified_strings.h"
-#include "qpycore_pyqtboundsignal.h"
-#include "qpycore_pyqtmethodproxy.h"
-#include "qpycore_pyqtproperty.h"
-#include "qpycore_pyqtpyobject.h"
-#include "qpycore_pyqtsignal.h"
-#include "qpycore_pyqtslotproxy.h"
-#include "qpycore_types.h"
-
-#include "sipAPIQtCore.h"
-
-
-// The objectified strings.
-PyObject *qpycore_dunder_name;
-PyObject *qpycore_dunder_mro;
-PyObject *qpycore_dunder_pyqtsignature;
-
-
-// Perform any required post-initialisation.
-void qpycore_post_init(PyObject *module_dict)
-{
-    // Register the event handlers.
-    qpycore_register_event_handlers();
-
-    // Initialise the pyqtProperty type and add it to the module dictionary.
-    if (!qpycore_pyqtProperty_init_type())
-        Py_FatalError("PyQt6.QtCore: Failed to initialise pyqtProperty type");
-
-    if (PyDict_SetItemString(module_dict, "pyqtProperty",
-                (PyObject *)qpycore_pyqtProperty_TypeObject) < 0)
-        Py_FatalError("PyQt6.QtCore: Failed to set pyqtProperty type");
-
-    // Initialise the pyqtSignal type and add it to the module dictionary.
-    if (!qpycore_pyqtSignal_init_type())
-        Py_FatalError("PyQt6.QtCore: Failed to initialise pyqtSignal type");
-
-    if (PyDict_SetItemString(module_dict, "pyqtSignal",
-                (PyObject *)qpycore_pyqtSignal_TypeObject) < 0)
-        Py_FatalError("PyQt6.QtCore: Failed to set pyqtSignal type");
-
-    // Initialise the pyqtBoundSignal type and add it to the module dictionary.
-    if (!qpycore_pyqtBoundSignal_init_type())
-        Py_FatalError("PyQt6.QtCore: Failed to initialise pyqtBoundSignal type");
-
-    if (PyDict_SetItemString(module_dict, "pyqtBoundSignal",
-                (PyObject *)qpycore_pyqtBoundSignal_TypeObject) < 0)
-        Py_FatalError("PyQt6.QtCore: Failed to set pyqtBoundSignal type");
-
-    // Initialise the private pyqtMethodProxy type.
-    if (!qpycore_pyqtMethodProxy_init_type())
-        Py_FatalError("PyQt6.QtCore: Failed to initialise pyqtMethodProxy type");
-
-    // Register the C++ type that wraps Python objects.
-    qRegisterMetaType<PyQt_PyObject>("PyQt_PyObject");
-
-    // Register the lazy attribute getter.
-    if (sipRegisterAttributeGetter(sipType_QObject, qpycore_get_lazy_attr) < 0)
-        Py_FatalError("PyQt6.QtCore: Failed to register attribute getter");
-
-    // Objectify some strings.
-    qpycore_dunder_name = PyUnicode_FromString("__name__");
-
-    if (!qpycore_dunder_name)
-        Py_FatalError("PyQt6.QtCore: Failed to objectify '__name__'");
-
-    qpycore_dunder_mro = PyUnicode_FromString("__mro__");
-
-    if (!qpycore_dunder_mro)
-        Py_FatalError("PyQt6.QtCore: Failed to objectify '__mro__'");
-
-    qpycore_dunder_pyqtsignature = PyUnicode_FromString("__pyqtSignature__");
-
-    if (!qpycore_dunder_pyqtsignature)
-        Py_FatalError("PyQt6.QtCore: Failed to objectify '__pyqtSignature__'");
-
-    // Create the mutex that serialises access to the slot proxies.  We don't
-    // use a statically initialised one because Qt needs some things to be
-    // initialised first (at least for Windows) and this is the only way to
-    // guarantee things are done in the right order.
-    PyQtSlotProxy::mutex = new QRecursiveMutex();
-
-    // Load the embedded qt.conf file if there is a bundled copy of Qt.
-    if (!qpycore_qt_conf())
-        Py_FatalError("PyQt6.QtCore: Unable to embed qt.conf");
-}
diff -Nur PyQt6-6.2.3/qpy/QtCore/qpycore_pyqtslot.cpp PyQt6-6.3.0.dev2204011159/qpy/QtCore/qpycore_pyqtslot.cpp
--- PyQt6-6.2.3/qpy/QtCore/qpycore_pyqtslot.cpp	2022-02-01 15:19:39.706706500 +0100
+++ PyQt6-6.3.0.dev2204011159/qpy/QtCore/qpycore_pyqtslot.cpp	2022-04-02 01:31:15.000000000 +0200
@@ -27,7 +27,7 @@
 // Create the slot for a callable.
 PyQtSlot::PyQtSlot(PyObject *callable, bool callable_is_method,
         const Chimera::Signature *slot_signature)
-    : mself(0), mself_wr(0), other(0), signature(slot_signature)
+    : mfunc(0), mself(0), mself_wr(0), other(0), signature(slot_signature)
 {
     if (callable_is_method)
     {
@@ -53,12 +53,16 @@
             other = callable;
         }
     }
+
+    // If the slot is a method then keep the function object alive.
+    Py_XINCREF(mfunc);
 }
 
 
 // Destroy the slot.
 PyQtSlot::~PyQtSlot()
 {
+    Py_XDECREF(mfunc);
     Py_XDECREF(mself_wr);
     Py_XDECREF(other);
 }
diff -Nur PyQt6-6.2.3/qpy/QtQml/qpyqml_listdata.cpp PyQt6-6.3.0.dev2204011159/qpy/QtQml/qpyqml_listdata.cpp
--- PyQt6-6.2.3/qpy/QtQml/qpyqml_listdata.cpp	2022-02-01 15:19:39.821179600 +0100
+++ PyQt6-6.3.0.dev2204011159/qpy/QtQml/qpyqml_listdata.cpp	2022-04-02 01:31:15.000000000 +0200
@@ -18,6 +18,8 @@
 // WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 
 
+#include <sip.h>
+
 #include "qpyqml_listdata.h"
 
 
@@ -42,6 +44,8 @@
 // Destroy the data.
 ListData::~ListData()
 {
+    SIP_BLOCK_THREADS
+
     Py_XDECREF(py_type);
     Py_XDECREF(py_obj);
     Py_XDECREF(py_list);
@@ -49,4 +53,6 @@
     Py_XDECREF(py_count);
     Py_XDECREF(py_at);
     Py_XDECREF(py_clear);
+
+    SIP_UNBLOCK_THREADS
 }
diff -Nur PyQt6-6.2.3/sip/QtBluetooth/qbluetoothdeviceinfo.sip PyQt6-6.3.0.dev2204011159/sip/QtBluetooth/qbluetoothdeviceinfo.sip
--- PyQt6-6.2.3/sip/QtBluetooth/qbluetoothdeviceinfo.sip	2022-02-01 15:19:46.052515700 +0100
+++ PyQt6-6.3.0.dev2204011159/sip/QtBluetooth/qbluetoothdeviceinfo.sip	2022-04-02 01:31:15.000000000 +0200
@@ -210,6 +210,9 @@
         None,
         RSSI,
         ManufacturerData,
+%If (Qt_6_3_0 -)
+        ServiceData,
+%End
         All,
     };
 
@@ -219,6 +222,18 @@
     QByteArray manufacturerData(quint16 manufacturerId) const;
     bool setManufacturerData(quint16 manufacturerId, const QByteArray &data);
     void setName(const QString &name);
+%If (Qt_6_3_0 -)
+    QList<QBluetoothUuid> serviceIds() const;
+%End
+%If (Qt_6_3_0 -)
+    QMultiHash<QBluetoothUuid, QByteArray> serviceData() const;
+%End
+%If (Qt_6_3_0 -)
+    QByteArray serviceData(const QBluetoothUuid &serviceId) const;
+%End
+%If (Qt_6_3_0 -)
+    bool setServiceData(const QBluetoothUuid &serviceId, const QByteArray &data);
+%End
 };
 
 %End
diff -Nur PyQt6-6.2.3/sip/QtBluetooth/qpybluetooth_qmultihash.sip PyQt6-6.3.0.dev2204011159/sip/QtBluetooth/qpybluetooth_qmultihash.sip
--- PyQt6-6.2.3/sip/QtBluetooth/qpybluetooth_qmultihash.sip	2022-02-01 15:19:46.055591000 +0100
+++ PyQt6-6.3.0.dev2204011159/sip/QtBluetooth/qpybluetooth_qmultihash.sip	2022-04-02 01:31:15.000000000 +0200
@@ -97,3 +97,87 @@
 };
 
 %End
+
+
+%If (Qt_6_3_0 -)
+
+template<_TYPE1_, _TYPE2_>
+%MappedType QMultiHash<_TYPE1_, _TYPE2_>
+        /TypeHint="Dict[_TYPE1_, _TYPE2_]", TypeHintValue="{}"/
+{
+%TypeHeaderCode
+#include <QMultiHash>
+%End
+
+%ConvertFromTypeCode
+    PyObject *d = PyDict_New();
+
+    if (!d)
+        return 0;
+
+    QMultiHash<_TYPE1_, _TYPE2_>::const_iterator it = sipCpp->constBegin();
+    QMultiHash<_TYPE1_, _TYPE2_>::const_iterator end = sipCpp->constEnd();
+
+    while (it != end)
+    {
+        _TYPE1_ *k = new _TYPE1_(it.key());
+        PyObject *kobj = sipConvertFromNewType(k, sipType__TYPE1_,
+                sipTransferObj);
+
+        if (!kobj)
+        {
+            delete k;
+            Py_DECREF(d);
+
+            return 0;
+        }
+
+        QList<_TYPE2_> values = sipCpp->values(it.key());
+
+        PyObject *py_values = PyList_New(values.size());
+
+        if (!py_values)
+        {
+            Py_DECREF(kobj);
+            Py_DECREF(d);
+
+            return 0;
+        }
+
+        int rc = PyDict_SetItem(d, kobj, py_values);
+
+        Py_DECREF(py_values);
+        Py_DECREF(kobj);
+
+        if (rc < 0)
+        {
+            Py_DECREF(d);
+
+            return 0;
+        }
+
+        for (int i = 0; i < values.size(); ++i)
+        {
+            _TYPE2_ *v = new _TYPE2_(values.at(i));
+            PyObject *vobj = sipConvertFromNewType(v, sipType__TYPE2_,
+                    sipTransferObj);
+
+            if (!vobj)
+            {
+                delete v;
+                Py_DECREF(d);
+
+                return 0;
+            }
+
+            PyList_SetItem(py_values, i, vobj);
+        }
+
+        ++it;
+    }
+
+    return d;
+%End
+};
+
+%End
diff -Nur PyQt6-6.2.3/sip/QtCore/QtCoremod.sip PyQt6-6.3.0.dev2204011159/sip/QtCore/QtCoremod.sip
--- PyQt6-6.2.3/sip/QtCore/QtCoremod.sip	2022-02-01 15:19:46.737896000 +0100
+++ PyQt6-6.3.0.dev2204011159/sip/QtCore/QtCoremod.sip	2022-04-02 01:31:15.000000000 +0200
@@ -22,7 +22,7 @@
 
 %Module(name=PyQt6.QtCore, call_super_init=True, default_VirtualErrorHandler=PyQt6, keyword_arguments="Optional", use_limited_api=True, py_ssize_t_clean=True)
 
-%Timeline {Qt_6_0_0 Qt_6_1_0 Qt_6_2_0}
+%Timeline {Qt_6_0_0 Qt_6_1_0 Qt_6_2_0 Qt_6_3_0}
 
 %Platforms {Android iOS Linux macOS WebAssembly Windows}
 
@@ -73,8 +73,8 @@
 const char *PYQT_VERSION_STR;
 
 %ModuleCode
-static int PYQT_VERSION = 0x060203;
-static const char *PYQT_VERSION_STR = "6.2.3";
+static int PYQT_VERSION = 0x060300;
+static const char *PYQT_VERSION_STR = "6.3.0.dev2204011159";
 %End
 
 %Include qglobal.sip
diff -Nur PyQt6-6.2.3/sip/QtCore/qbytearray.sip PyQt6-6.3.0.dev2204011159/sip/QtCore/qbytearray.sip
--- PyQt6-6.2.3/sip/QtCore/qbytearray.sip	2022-02-01 15:19:46.798362500 +0100
+++ PyQt6-6.3.0.dev2204011159/sip/QtCore/qbytearray.sip	2022-04-02 01:31:15.000000000 +0200
@@ -399,6 +399,9 @@
 
     QByteArray sliced(qsizetype pos) const;
     QByteArray sliced(qsizetype pos, qsizetype n) const;
+%If (Qt_6_3_0 -)
+    bool isValidUtf8() const;
+%End
 };
 
 bool operator==(const QByteArray &a1, const QByteArray &a2);
diff -Nur PyQt6-6.2.3/sip/QtCore/qbytearraymatcher.sip PyQt6-6.3.0.dev2204011159/sip/QtCore/qbytearraymatcher.sip
--- PyQt6-6.2.3/sip/QtCore/qbytearraymatcher.sip	2022-02-01 15:19:46.835033400 +0100
+++ PyQt6-6.3.0.dev2204011159/sip/QtCore/qbytearraymatcher.sip	2022-04-02 01:31:15.000000000 +0200
@@ -27,13 +27,28 @@
 %End
 
 public:
-    QByteArrayMatcher();
+%If (Qt_6_3_0 -)
+    QByteArrayMatcher(const char *pattern /Encoding="None"/, qsizetype length = -1);
+%End
+%If (- Qt_6_3_0)
     QByteArrayMatcher(const char *pattern /Encoding="None"/, qsizetype length);
+%End
+%If (Qt_6_3_0 -)
+    explicit QByteArrayMatcher(QByteArrayView pattern);
+%End
+%If (- Qt_6_3_0)
     explicit QByteArrayMatcher(const QByteArray &pattern);
+%End
+    QByteArrayMatcher();
     QByteArrayMatcher(const QByteArrayMatcher &other);
     ~QByteArrayMatcher();
     void setPattern(const QByteArray &pattern);
-    qsizetype indexIn(const char *str /Encoding="None"/, qsizetype len, qsizetype from = 0) const;
+%If (Qt_6_3_0 -)
+    qsizetype indexIn(QByteArrayView data, qsizetype from = 0) const;
+%End
+%If (- Qt_6_3_0)
     qsizetype indexIn(const QByteArray &ba, qsizetype from = 0) const;
+%End
+    qsizetype indexIn(const char *str /Encoding="None"/, qsizetype len, qsizetype from = 0) const;
     QByteArray pattern() const;
 };
diff -Nur PyQt6-6.2.3/sip/QtCore/qcollator.sip PyQt6-6.3.0.dev2204011159/sip/QtCore/qcollator.sip
--- PyQt6-6.2.3/sip/QtCore/qcollator.sip	2022-02-01 15:19:46.699305300 +0100
+++ PyQt6-6.3.0.dev2204011159/sip/QtCore/qcollator.sip	2022-04-02 01:31:15.000000000 +0200
@@ -60,4 +60,10 @@
     bool ignorePunctuation() const;
     int compare(const QString &s1, const QString &s2) const;
     QCollatorSortKey sortKey(const QString &string) const;
+%If (Qt_6_3_0 -)
+    static int defaultCompare(QStringView s1, QStringView s2);
+%End
+%If (Qt_6_3_0 -)
+    static QCollatorSortKey defaultSortKey(QStringView key);
+%End
 };
diff -Nur PyQt6-6.2.3/sip/QtCore/qcryptographichash.sip PyQt6-6.3.0.dev2204011159/sip/QtCore/qcryptographichash.sip
--- PyQt6-6.2.3/sip/QtCore/qcryptographichash.sip	2022-02-01 15:19:46.712203700 +0100
+++ PyQt6-6.3.0.dev2204011159/sip/QtCore/qcryptographichash.sip	2022-04-02 01:31:15.000000000 +0200
@@ -57,11 +57,24 @@
     explicit QCryptographicHash(QCryptographicHash::Algorithm method);
     ~QCryptographicHash();
     void reset();
-    void addData(const char *data /Array/, qsizetype length /ArraySize/);
+%If (Qt_6_3_0 -)
+    void addData(QByteArrayView data);
+%End
+%If (- Qt_6_3_0)
     void addData(const QByteArray &data);
+%End
+    void addData(const char *data /Array/, qsizetype length /ArraySize/);
     bool addData(QIODevice *device);
     QByteArray result() const;
+%If (Qt_6_3_0 -)
+    QByteArrayView resultView() const;
+%End
+%If (Qt_6_3_0 -)
+    static QByteArray hash(QByteArrayView data, QCryptographicHash::Algorithm method);
+%End
+%If (- Qt_6_3_0)
     static QByteArray hash(const QByteArray &data, QCryptographicHash::Algorithm method);
+%End
     static int hashLength(QCryptographicHash::Algorithm method);
 
 private:
diff -Nur PyQt6-6.2.3/sip/QtCore/qdatastream.sip PyQt6-6.3.0.dev2204011159/sip/QtCore/qdatastream.sip
--- PyQt6-6.2.3/sip/QtCore/qdatastream.sip	2022-02-01 15:19:46.736838300 +0100
+++ PyQt6-6.3.0.dev2204011159/sip/QtCore/qdatastream.sip	2022-04-02 01:31:15.000000000 +0200
@@ -68,6 +68,9 @@
 %If (Qt_6_2_0 -)
         Qt_6_2,
 %End
+%If (Qt_6_3_0 -)
+        Qt_6_3,
+%End
     };
 
     enum ByteOrder
diff -Nur PyQt6-6.2.3/sip/QtCore/qdir.sip PyQt6-6.3.0.dev2204011159/sip/QtCore/qdir.sip
--- PyQt6-6.2.3/sip/QtCore/qdir.sip	2022-02-01 15:19:46.739610000 +0100
+++ PyQt6-6.3.0.dev2204011159/sip/QtCore/qdir.sip	2022-04-02 01:31:15.000000000 +0200
@@ -131,6 +131,9 @@
     QStringList entryList(const QStringList &nameFilters, QDir::Filters filters = QDir::NoFilter, QDir::SortFlags sort = QDir::NoSort) const;
     QFileInfoList entryInfoList(QDir::Filters filters = QDir::NoFilter, QDir::SortFlags sort = QDir::NoSort) const;
     QFileInfoList entryInfoList(const QStringList &nameFilters, QDir::Filters filters = QDir::NoFilter, QDir::SortFlags sort = QDir::NoSort) const;
+%If (Qt_6_3_0 -)
+    bool mkdir(const QString &dirName, QFileDevice::Permissions permissions) const;
+%End
     bool mkdir(const QString &dirName) const;
     bool rmdir(const QString &dirName) const;
     bool mkpath(const QString &dirPath) const;
diff -Nur PyQt6-6.2.3/sip/QtCore/qdiriterator.sip PyQt6-6.3.0.dev2204011159/sip/QtCore/qdiriterator.sip
--- PyQt6-6.2.3/sip/QtCore/qdiriterator.sip	2022-02-01 15:19:46.657220800 +0100
+++ PyQt6-6.3.0.dev2204011159/sip/QtCore/qdiriterator.sip	2022-04-02 01:31:15.000000000 +0200
@@ -41,6 +41,9 @@
     QDirIterator(const QString &path, const QStringList &nameFilters, QDir::Filters filters = QDir::NoFilter, QDirIterator::IteratorFlags flags = QDirIterator::NoIteratorFlags);
     ~QDirIterator();
     QString next();
+%If (Qt_6_3_0 -)
+    QFileInfo nextFileInfo();
+%End
     bool hasNext() const;
     QString fileName() const;
     QString filePath() const;
diff -Nur PyQt6-6.2.3/sip/QtCore/qeventloop.sip PyQt6-6.3.0.dev2204011159/sip/QtCore/qeventloop.sip
--- PyQt6-6.2.3/sip/QtCore/qeventloop.sip	2022-02-01 15:19:46.805099700 +0100
+++ PyQt6-6.3.0.dev2204011159/sip/QtCore/qeventloop.sip	2022-04-02 01:31:15.000000000 +0200
@@ -36,7 +36,6 @@
         ExcludeUserInputEvents,
         ExcludeSocketNotifiers,
         WaitForMoreEvents,
-        X11ExcludeTimers,
     };
 
     typedef QFlags<QEventLoop::ProcessEventsFlag> ProcessEventsFlags;
diff -Nur PyQt6-6.2.3/sip/QtCore/qfile.sip PyQt6-6.3.0.dev2204011159/sip/QtCore/qfile.sip
--- PyQt6-6.2.3/sip/QtCore/qfile.sip	2022-02-01 15:19:46.837916400 +0100
+++ PyQt6-6.3.0.dev2204011159/sip/QtCore/qfile.sip	2022-04-02 01:31:15.000000000 +0200
@@ -49,6 +49,9 @@
     static bool link(const QString &oldname, const QString &newName) /ReleaseGIL/;
     bool copy(const QString &newName) /ReleaseGIL/;
     static bool copy(const QString &fileName, const QString &newName) /ReleaseGIL/;
+%If (Qt_6_3_0 -)
+    bool open(QIODeviceBase::OpenMode flags, QFileDevice::Permissions permissions) /ReleaseGIL/;
+%End
     virtual bool open(QIODeviceBase::OpenMode flags) /ReleaseGIL/;
     bool open(int fd, QIODeviceBase::OpenMode ioFlags, QFileDevice::FileHandleFlags handleFlags = QFileDevice::DontCloseHandle) /ReleaseGIL/;
     virtual qint64 size() const;
diff -Nur PyQt6-6.2.3/sip/QtCore/qiodevicebase.sip PyQt6-6.3.0.dev2204011159/sip/QtCore/qiodevicebase.sip
--- PyQt6-6.2.3/sip/QtCore/qiodevicebase.sip	2022-02-01 15:19:46.800699200 +0100
+++ PyQt6-6.3.0.dev2204011159/sip/QtCore/qiodevicebase.sip	2022-04-02 01:31:15.000000000 +0200
@@ -42,4 +42,9 @@
     };
 
     typedef QFlags<QIODeviceBase::OpenModeFlag> OpenMode;
+
+protected:
+%If (Qt_6_3_0 -)
+    ~QIODeviceBase();
+%End
 };
diff -Nur PyQt6-6.2.3/sip/QtCore/qlocale.sip PyQt6-6.3.0.dev2204011159/sip/QtCore/qlocale.sip
--- PyQt6-6.2.3/sip/QtCore/qlocale.sip	2022-02-01 15:19:46.711655600 +0100
+++ PyQt6-6.3.0.dev2204011159/sip/QtCore/qlocale.sip	2022-04-02 01:31:15.000000000 +0200
@@ -377,6 +377,12 @@
         Odia,
         Uyghur,
         Wolaytta,
+%If (Qt_6_3_0 -)
+        Kaingang,
+%End
+%If (Qt_6_3_0 -)
+        Nheengatu,
+%End
     };
 
     enum Country
@@ -1072,10 +1078,16 @@
     QDate toDate(const QString &string, const QString &format, QCalendar cal) const;
     QDateTime toDateTime(const QString &string, const QString &format, QCalendar cal) const;
     QLocale collation() const;
-%If (Qt_6_1_0 -)
+%If (Qt_6_3_0 -)
+    static QString languageToCode(QLocale::Language language, QLocale::LanguageCodeTypes codeTypes = QLocale::AnyLanguageCode);
+%End
+%If (Qt_6_1_0 - Qt_6_3_0)
     static QString languageToCode(QLocale::Language language);
 %End
-%If (Qt_6_1_0 -)
+%If (Qt_6_3_0 -)
+    static QLocale::Language codeToLanguage(QStringView languageCode, QLocale::LanguageCodeTypes codeTypes = QLocale::AnyLanguageCode);
+%End
+%If (Qt_6_1_0 - Qt_6_3_0)
     static QLocale::Language codeToLanguage(QStringView languageCode);
 %End
 %If (Qt_6_1_0 -)
@@ -1108,6 +1120,26 @@
 %If (Qt_6_2_0 -)
     static QString territoryToString(QLocale::Territory territory);
 %End
+%If (Qt_6_3_0 -)
+
+    enum LanguageCodeType /BaseType=IntFlag/
+    {
+        ISO639Part1,
+        ISO639Part2B,
+        ISO639Part2T,
+        ISO639Part3,
+        LegacyLanguageCode,
+        ISO639Part2,
+        ISO639Alpha2,
+        ISO639Alpha3,
+        ISO639,
+        AnyLanguageCode,
+    };
+
+%End
+%If (Qt_6_3_0 -)
+    typedef QFlags<QLocale::LanguageCodeType> LanguageCodeTypes;
+%End
 };
 
 QDataStream &operator<<(QDataStream &, const QLocale &) /ReleaseGIL/;
diff -Nur PyQt6-6.2.3/sip/QtCore/qoperatingsystemversion.sip PyQt6-6.3.0.dev2204011159/sip/QtCore/qoperatingsystemversion.sip
--- PyQt6-6.2.3/sip/QtCore/qoperatingsystemversion.sip	2022-02-01 15:19:46.695893500 +0100
+++ PyQt6-6.3.0.dev2204011159/sip/QtCore/qoperatingsystemversion.sip	2022-04-02 01:31:15.000000000 +0200
@@ -20,6 +20,92 @@
 // WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 
 
+%If (Qt_6_3_0 -)
+
+class QOperatingSystemVersionBase
+{
+%TypeHeaderCode
+#include <qoperatingsystemversion.h>
+%End
+
+protected:
+    QOperatingSystemVersionBase();
+};
+
+%End
+%If (Qt_6_3_0 -)
+
+class QOperatingSystemVersion : QOperatingSystemVersionBase
+{
+%TypeHeaderCode
+#include <qoperatingsystemversion.h>
+%End
+
+public:
+    enum OSType
+    {
+        Unknown,
+        Windows,
+        MacOS,
+        IOS,
+        TvOS,
+        WatchOS,
+        Android,
+    };
+
+    static const QOperatingSystemVersion Windows7;
+    static const QOperatingSystemVersion Windows8;
+    static const QOperatingSystemVersion Windows8_1;
+    static const QOperatingSystemVersion Windows10;
+    static const QOperatingSystemVersion OSXMavericks;
+    static const QOperatingSystemVersion OSXYosemite;
+    static const QOperatingSystemVersion OSXElCapitan;
+    static const QOperatingSystemVersion MacOSSierra;
+    static const QOperatingSystemVersion MacOSHighSierra;
+    static const QOperatingSystemVersion MacOSMojave;
+    static const QOperatingSystemVersion MacOSCatalina;
+    static const QOperatingSystemVersion MacOSBigSur;
+    static const QOperatingSystemVersion MacOSMonterey;
+    static const QOperatingSystemVersion AndroidJellyBean;
+    static const QOperatingSystemVersion AndroidJellyBean_MR1;
+    static const QOperatingSystemVersion AndroidJellyBean_MR2;
+    static const QOperatingSystemVersion AndroidKitKat;
+    static const QOperatingSystemVersion AndroidLollipop;
+    static const QOperatingSystemVersion AndroidLollipop_MR1;
+    static const QOperatingSystemVersion AndroidMarshmallow;
+    static const QOperatingSystemVersion AndroidNougat;
+    static const QOperatingSystemVersion AndroidNougat_MR1;
+    static const QOperatingSystemVersion AndroidOreo;
+    static const QOperatingSystemVersion AndroidOreo_MR1;
+    static const QOperatingSystemVersion AndroidPie;
+    static const QOperatingSystemVersion Android10;
+    static const QOperatingSystemVersion Android11;
+    static const QOperatingSystemVersionBase Windows10_1809;
+    static const QOperatingSystemVersionBase Windows10_1903;
+    static const QOperatingSystemVersionBase Windows10_1909;
+    static const QOperatingSystemVersionBase Windows10_2004;
+    static const QOperatingSystemVersionBase Windows10_20H2;
+    static const QOperatingSystemVersionBase Windows10_21H1;
+    static const QOperatingSystemVersionBase Windows10_21H2;
+    static const QOperatingSystemVersionBase Windows11;
+    QOperatingSystemVersion(QOperatingSystemVersion::OSType osType, int vmajor, int vminor = -1, int vmicro = -1);
+    static QOperatingSystemVersion current();
+    static QOperatingSystemVersion::OSType currentType();
+    QVersionNumber version() const;
+    int majorVersion() const;
+    int minorVersion() const;
+    int microVersion() const;
+    int segmentCount() const;
+    QOperatingSystemVersion::OSType type() const;
+    QString name() const;
+
+private:
+    QOperatingSystemVersion();
+};
+
+%End
+%If (- Qt_6_3_0)
+
 class QOperatingSystemVersion
 {
 %TypeHeaderCode
@@ -89,7 +175,28 @@
     QOperatingSystemVersion();
 };
 
+%End
+%If (Qt_6_3_0 -)
+bool operator>(QOperatingSystemVersionBase lhs, QOperatingSystemVersionBase rhs);
+%End
+%If (- Qt_6_3_0)
 bool operator>(const QOperatingSystemVersion &lhs, const QOperatingSystemVersion &rhs);
+%End
+%If (Qt_6_3_0 -)
+bool operator>=(QOperatingSystemVersionBase lhs, QOperatingSystemVersionBase rhs);
+%End
+%If (- Qt_6_3_0)
 bool operator>=(const QOperatingSystemVersion &lhs, const QOperatingSystemVersion &rhs);
+%End
+%If (Qt_6_3_0 -)
+bool operator<(QOperatingSystemVersionBase lhs, QOperatingSystemVersionBase rhs);
+%End
+%If (- Qt_6_3_0)
 bool operator<(const QOperatingSystemVersion &lhs, const QOperatingSystemVersion &rhs);
+%End
+%If (Qt_6_3_0 -)
+bool operator<=(QOperatingSystemVersionBase lhs, QOperatingSystemVersionBase rhs);
+%End
+%If (- Qt_6_3_0)
 bool operator<=(const QOperatingSystemVersion &lhs, const QOperatingSystemVersion &rhs);
+%End
diff -Nur PyQt6-6.2.3/sip/QtCore/qprocess.sip PyQt6-6.3.0.dev2204011159/sip/QtCore/qprocess.sip
--- PyQt6-6.2.3/sip/QtCore/qprocess.sip	2022-02-01 15:19:46.810648200 +0100
+++ PyQt6-6.3.0.dev2204011159/sip/QtCore/qprocess.sip	2022-04-02 01:31:15.000000000 +0200
@@ -210,6 +210,17 @@
 %End
 
 public:
+%If (Qt_6_3_0 -)
+
+    enum Initialization
+    {
+        InheritFromParent,
+    };
+
+%End
+%If (Qt_6_3_0 -)
+    QProcessEnvironment(QProcessEnvironment::Initialization);
+%End
     QProcessEnvironment();
     QProcessEnvironment(const QProcessEnvironment &other);
     ~QProcessEnvironment();
@@ -226,6 +237,9 @@
     static QProcessEnvironment systemEnvironment();
     QStringList keys() const;
     void swap(QProcessEnvironment &other /Constrained/);
+%If (Qt_6_3_0 -)
+    bool inheritsFromParent() const;
+%End
 };
 
 %End
diff -Nur PyQt6-6.2.3/sip/QtCore/qregularexpression.sip PyQt6-6.3.0.dev2204011159/sip/QtCore/qregularexpression.sip
--- PyQt6-6.2.3/sip/QtCore/qregularexpression.sip	2022-02-01 15:19:46.846917200 +0100
+++ PyQt6-6.3.0.dev2204011159/sip/QtCore/qregularexpression.sip	2022-04-02 01:31:15.000000000 +0200
@@ -151,6 +151,12 @@
     qsizetype capturedLength(int nth = 0) const;
     qsizetype capturedEnd(QStringView name) const;
     qsizetype capturedEnd(int nth = 0) const;
+%If (Qt_6_3_0 -)
+    bool hasCaptured(int nth) const;
+%End
+%If (Qt_6_3_0 -)
+    bool hasCaptured(const QString &name) const;
+%End
 };
 
 class QRegularExpressionMatchIterator
diff -Nur PyQt6-6.2.3/sip/QtCore/qthreadpool.sip PyQt6-6.3.0.dev2204011159/sip/QtCore/qthreadpool.sip
--- PyQt6-6.2.3/sip/QtCore/qthreadpool.sip	2022-02-01 15:19:46.703902500 +0100
+++ PyQt6-6.3.0.dev2204011159/sip/QtCore/qthreadpool.sip	2022-04-02 01:31:15.000000000 +0200
@@ -133,4 +133,45 @@
 %If (Qt_6_2_0 -)
     QThread::Priority threadPriority() const;
 %End
+%If (Qt_6_3_0 -)
+    void startOnReservedThread(QRunnable *runnable /GetWrapper/) /ReleaseGIL/;
+%MethodCode
+        // We have to handle the object ownership manually.
+        if (a0->autoDelete())
+            sipTransferTo(a0Wrapper, sipSelf);
+        
+        Py_BEGIN_ALLOW_THREADS
+        sipCpp->startOnReservedThread(a0);
+        Py_END_ALLOW_THREADS
+%End
+
+%End
+%If (Qt_6_3_0 -)
+    void startOnReservedThread(SIP_PYCALLABLE functionToRun /TypeHint="Callable[[], None]"/) /ReleaseGIL/;
+%MethodCode
+        Py_INCREF(a0);
+        
+        Py_BEGIN_ALLOW_THREADS
+        
+        sipCpp->startOnReservedThread([a0]() {
+            SIP_BLOCK_THREADS
+        
+            PyObject *res;
+        
+            res = PyObject_CallObject(a0, NULL);
+        
+            Py_DECREF(a0);
+        
+            if (res)
+                Py_DECREF(res);
+            else
+                pyqt6_err_print();
+        
+            SIP_UNBLOCK_THREADS
+        });
+        
+        Py_END_ALLOW_THREADS
+%End
+
+%End
 };
diff -Nur PyQt6-6.2.3/sip/QtCore/qurl.sip PyQt6-6.3.0.dev2204011159/sip/QtCore/qurl.sip
--- PyQt6-6.2.3/sip/QtCore/qurl.sip	2022-02-01 15:19:46.786035000 +0100
+++ PyQt6-6.3.0.dev2204011159/sip/QtCore/qurl.sip	2022-04-02 01:31:15.000000000 +0200
@@ -134,8 +134,18 @@
     bool hasQuery() const;
     bool hasFragment() const;
     QString errorString() const;
+%If (Qt_6_3_0 -)
+    static QString fromAce(const QByteArray &domain, QUrl::AceProcessingOptions options = {});
+%End
+%If (- Qt_6_3_0)
     static QString fromAce(const QByteArray &);
+%End
+%If (Qt_6_3_0 -)
+    static QByteArray toAce(const QString &domain, QUrl::AceProcessingOptions options = {});
+%End
+%If (- Qt_6_3_0)
     static QByteArray toAce(const QString &);
+%End
     static QStringList idnWhitelist();
     static void setIdnWhitelist(const QStringList &);
     static QUrl fromUserInput(const QString &userInput, const QString &workingDirectory = QString(), QUrl::UserInputResolutionOptions options = QUrl::DefaultResolution);
@@ -159,6 +169,18 @@
     };
 
     typedef QFlags<QUrl::UserInputResolutionOption> UserInputResolutionOptions;
+%If (Qt_6_3_0 -)
+
+    enum AceProcessingOption /BaseType=Flag/
+    {
+        IgnoreIDNWhitelist,
+        AceTransitionalProcessing,
+    };
+
+%End
+%If (Qt_6_3_0 -)
+    typedef QFlags<QUrl::AceProcessingOption> AceProcessingOptions;
+%End
 };
 
 QDataStream &operator<<(QDataStream &, const QUrl &) /ReleaseGIL/;
diff -Nur PyQt6-6.2.3/sip/QtCore/quuid.sip PyQt6-6.3.0.dev2204011159/sip/QtCore/quuid.sip
--- PyQt6-6.2.3/sip/QtCore/quuid.sip	2022-02-01 15:19:46.845375000 +0100
+++ PyQt6-6.3.0.dev2204011159/sip/QtCore/quuid.sip	2022-04-02 01:31:15.000000000 +0200
@@ -90,7 +90,13 @@
     QUuid::Version version() const;
     QByteArray toByteArray(QUuid::StringFormat mode = QUuid::WithBraces) const;
     QByteArray toRfc4122() const;
+%If (Qt_6_3_0 -)
+    static QUuid fromRfc4122(QByteArrayView);
+%End
+%If (- Qt_6_3_0)
     static QUuid fromRfc4122(const QByteArray &);
+%End
+    static QUuid fromString(QStringView string);
 };
 
 QDataStream &operator<<(QDataStream &, const QUuid & /Constrained/) /ReleaseGIL/;
diff -Nur PyQt6-6.2.3/sip/QtGui/qbitmap.sip PyQt6-6.3.0.dev2204011159/sip/QtGui/qbitmap.sip
--- PyQt6-6.2.3/sip/QtGui/qbitmap.sip	2022-02-01 15:19:46.261048000 +0100
+++ PyQt6-6.3.0.dev2204011159/sip/QtGui/qbitmap.sip	2022-04-02 01:31:15.000000000 +0200
@@ -39,6 +39,9 @@
             sipError = sipBadCallableArg(0, a0Wrapper);
 %End
 
+%If (Qt_6_3_0 -)
+    virtual ~QBitmap();
+%End
     void clear();
     static QBitmap fromImage(const QImage &image, Qt::ImageConversionFlags flags = Qt::AutoColor);
     static QBitmap fromPixmap(const QPixmap &pixmap);
diff -Nur PyQt6-6.2.3/sip/QtGui/qevent.sip PyQt6-6.3.0.dev2204011159/sip/QtGui/qevent.sip
--- PyQt6-6.2.3/sip/QtGui/qevent.sip	2022-02-01 15:19:46.347990000 +0100
+++ PyQt6-6.3.0.dev2204011159/sip/QtGui/qevent.sip	2022-04-02 01:31:15.000000000 +0200
@@ -737,6 +737,9 @@
 %End
 
 public:
+%If (Qt_6_3_0 -)
+    QHoverEvent(QEvent::Type type, const QPointF &pos, const QPointF &globalPos, const QPointF &oldPos, Qt::KeyboardModifiers modifiers = Qt::NoModifier, const QPointingDevice *device = QPointingDevice::primaryPointingDevice());
+%End
     QHoverEvent(QEvent::Type type, const QPointF &pos, const QPointF &oldPos, Qt::KeyboardModifiers modifiers = Qt::NoModifier, const QPointingDevice *device = QPointingDevice::primaryPointingDevice());
     virtual ~QHoverEvent();
     virtual bool isUpdateEvent() const;
diff -Nur PyQt6-6.2.3/sip/QtGui/qfontmetrics.sip PyQt6-6.3.0.dev2204011159/sip/QtGui/qfontmetrics.sip
--- PyQt6-6.2.3/sip/QtGui/qfontmetrics.sip	2022-02-01 15:19:46.290840900 +0100
+++ PyQt6-6.3.0.dev2204011159/sip/QtGui/qfontmetrics.sip	2022-04-02 01:31:15.000000000 +0200
@@ -43,6 +43,9 @@
     bool inFont(QChar) const;
     int leftBearing(QChar) const;
     int rightBearing(QChar) const;
+%If (Qt_6_3_0 -)
+    QRect boundingRect(const QString &text, const QTextOption &textOption) const;
+%End
     QRect boundingRect(QChar) const /PyName=boundingRectChar/;
     QRect boundingRect(const QString &text) const;
     QRect boundingRect(const QRect &rect, int flags, const QString &text, int tabStops = 0, SIP_PYLIST tabArray /AllowNone,TypeHint="Optional[List[int]]"/ = 0) const;
@@ -83,10 +86,16 @@
     QString elidedText(const QString &text, Qt::TextElideMode mode, int width, int flags = 0) const;
     bool operator==(const QFontMetrics &other) const;
     bool operator!=(const QFontMetrics &other) const;
+%If (Qt_6_3_0 -)
+    QRect tightBoundingRect(const QString &text, const QTextOption &textOption) const;
+%End
     QRect tightBoundingRect(const QString &text) const;
     bool inFontUcs4(uint character) const;
     void swap(QFontMetrics &other /Constrained/);
     int capHeight() const;
+%If (Qt_6_3_0 -)
+    int horizontalAdvance(const QString &, const QTextOption &textOption) const;
+%End
     int horizontalAdvance(const QString &, int length = -1) const;
     qreal fontDpi() const;
 };
@@ -115,6 +124,9 @@
     bool inFont(QChar) const;
     qreal leftBearing(QChar) const;
     qreal rightBearing(QChar) const;
+%If (Qt_6_3_0 -)
+    QRectF boundingRect(const QString &text, const QTextOption &textOption) const;
+%End
     QRectF boundingRect(QChar) const /PyName=boundingRectChar/;
     QRectF boundingRect(const QString &string) const;
     QRectF boundingRect(const QRectF &rect, int flags, const QString &text, int tabStops = 0, SIP_PYLIST tabArray /AllowNone,TypeHint="Optional[List[int]]"/ = 0) const;
@@ -145,10 +157,16 @@
     QString elidedText(const QString &text, Qt::TextElideMode mode, qreal width, int flags = 0) const;
     bool operator==(const QFontMetricsF &other) const;
     bool operator!=(const QFontMetricsF &other) const;
+%If (Qt_6_3_0 -)
+    QRectF tightBoundingRect(const QString &text, const QTextOption &textOption) const;
+%End
     QRectF tightBoundingRect(const QString &text) const;
     bool inFontUcs4(uint character) const;
     void swap(QFontMetricsF &other /Constrained/);
     qreal capHeight() const;
+%If (Qt_6_3_0 -)
+    qreal horizontalAdvance(const QString &string, const QTextOption &textOption) const;
+%End
     qreal horizontalAdvance(const QString &string, int length = -1) const;
     qreal fontDpi() const;
 };
diff -Nur PyQt6-6.2.3/sip/QtGui/qinputdevice.sip PyQt6-6.3.0.dev2204011159/sip/QtGui/qinputdevice.sip
--- PyQt6-6.2.3/sip/QtGui/qinputdevice.sip	2022-02-01 15:19:46.257930000 +0100
+++ PyQt6-6.3.0.dev2204011159/sip/QtGui/qinputdevice.sip	2022-04-02 01:31:15.000000000 +0200
@@ -81,4 +81,9 @@
 
 signals:
     void availableVirtualGeometryChanged(QRect area);
+
+public:
+%If (Qt_6_3_0 -)
+    static QStringList seatNames();
+%End
 };
diff -Nur PyQt6-6.2.3/sip/QtGui/qtextdocument.sip PyQt6-6.3.0.dev2204011159/sip/QtGui/qtextdocument.sip
--- PyQt6-6.2.3/sip/QtGui/qtextdocument.sip	2022-02-01 15:19:46.294087200 +0100
+++ PyQt6-6.3.0.dev2204011159/sip/QtGui/qtextdocument.sip	2022-04-02 01:31:15.000000000 +0200
@@ -54,6 +54,9 @@
     {
         DocumentTitle,
         DocumentUrl,
+%If (Qt_6_3_0 -)
+        CssMedia,
+%End
     };
 
     void setMetaInformation(QTextDocument::MetaInformation info, const QString &);
diff -Nur PyQt6-6.2.3/sip/QtGui/qtextformat.sip PyQt6-6.3.0.dev2204011159/sip/QtGui/qtextformat.sip
--- PyQt6-6.2.3/sip/QtGui/qtextformat.sip	2022-02-01 15:19:46.288903500 +0100
+++ PyQt6-6.3.0.dev2204011159/sip/QtGui/qtextformat.sip	2022-04-02 01:31:15.000000000 +0200
@@ -50,7 +50,37 @@
 %End
 };
 
+%If (Qt_6_3_0 -)
+QDataStream &operator<<(QDataStream &, const QTextTableCellFormat &) /ReleaseGIL/;
+%End
+%If (Qt_6_3_0 -)
+QDataStream &operator<<(QDataStream &, const QTextFrameFormat &) /ReleaseGIL/;
+%End
+%If (Qt_6_3_0 -)
+QDataStream &operator<<(QDataStream &, const QTextListFormat &) /ReleaseGIL/;
+%End
+%If (Qt_6_3_0 -)
+QDataStream &operator<<(QDataStream &, const QTextBlockFormat &) /ReleaseGIL/;
+%End
+%If (Qt_6_3_0 -)
+QDataStream &operator<<(QDataStream &, const QTextCharFormat &) /ReleaseGIL/;
+%End
 QDataStream &operator<<(QDataStream &, const QTextLength &) /ReleaseGIL/;
+%If (Qt_6_3_0 -)
+QDataStream &operator>>(QDataStream &, QTextTableCellFormat & /Constrained/) /ReleaseGIL/;
+%End
+%If (Qt_6_3_0 -)
+QDataStream &operator>>(QDataStream &, QTextFrameFormat & /Constrained/) /ReleaseGIL/;
+%End
+%If (Qt_6_3_0 -)
+QDataStream &operator>>(QDataStream &, QTextListFormat & /Constrained/) /ReleaseGIL/;
+%End
+%If (Qt_6_3_0 -)
+QDataStream &operator>>(QDataStream &, QTextBlockFormat & /Constrained/) /ReleaseGIL/;
+%End
+%If (Qt_6_3_0 -)
+QDataStream &operator>>(QDataStream &, QTextCharFormat & /Constrained/) /ReleaseGIL/;
+%End
 QDataStream &operator>>(QDataStream &, QTextLength & /Constrained/) /ReleaseGIL/;
 
 class QTextFormat
diff -Nur PyQt6-6.2.3/sip/QtGui/qvalidator.sip PyQt6-6.3.0.dev2204011159/sip/QtGui/qvalidator.sip
--- PyQt6-6.2.3/sip/QtGui/qvalidator.sip	2022-02-01 15:19:46.336202000 +0100
+++ PyQt6-6.3.0.dev2204011159/sip/QtGui/qvalidator.sip	2022-04-02 01:31:15.000000000 +0200
@@ -92,6 +92,9 @@
 
     void setNotation(QDoubleValidator::Notation);
     QDoubleValidator::Notation notation() const;
+%If (Qt_6_3_0 -)
+    virtual void fixup(QString &input) const;
+%End
 };
 
 class QRegularExpressionValidator : QValidator
diff -Nur PyQt6-6.2.3/sip/QtMultimedia/qvideoframe.sip PyQt6-6.3.0.dev2204011159/sip/QtMultimedia/qvideoframe.sip
--- PyQt6-6.2.3/sip/QtMultimedia/qvideoframe.sip	2022-02-01 15:19:46.607186800 +0100
+++ PyQt6-6.3.0.dev2204011159/sip/QtMultimedia/qvideoframe.sip	2022-04-02 01:31:15.000000000 +0200
@@ -94,6 +94,29 @@
     QString subtitleText() const;
     void setSubtitleText(const QString &text);
     void paint(QPainter *painter, const QRectF &rect, const QVideoFrame::PaintOptions &options);
+%If (Qt_6_3_0 -)
+
+    enum RotationAngle
+    {
+        Rotation0,
+        Rotation90,
+        Rotation180,
+        Rotation270,
+    };
+
+%End
+%If (Qt_6_3_0 -)
+    void setRotationAngle(QVideoFrame::RotationAngle);
+%End
+%If (Qt_6_3_0 -)
+    QVideoFrame::RotationAngle rotationAngle() const;
+%End
+%If (Qt_6_3_0 -)
+    void setMirrored(bool);
+%End
+%If (Qt_6_3_0 -)
+    bool mirrored() const;
+%End
 };
 
 %End
diff -Nur PyQt6-6.2.3/sip/QtMultimedia/qvideoframeformat.sip PyQt6-6.3.0.dev2204011159/sip/QtMultimedia/qvideoframeformat.sip
--- PyQt6-6.2.3/sip/QtMultimedia/qvideoframeformat.sip	2022-02-01 15:19:46.643543200 +0100
+++ PyQt6-6.3.0.dev2204011159/sip/QtMultimedia/qvideoframeformat.sip	2022-04-02 01:31:15.000000000 +0200
@@ -78,6 +78,9 @@
         YCbCr_xvYCC601,
         YCbCr_xvYCC709,
         YCbCr_JPEG,
+%If (Qt_6_3_0 -)
+        YCbCr_BT2020,
+%End
     };
 
     QVideoFrameFormat();
@@ -106,6 +109,9 @@
     void setMirrored(bool mirrored);
     static QVideoFrameFormat::PixelFormat pixelFormatFromImageFormat(QImage::Format format);
     static QImage::Format imageFormatFromPixelFormat(QVideoFrameFormat::PixelFormat format);
+%If (Qt_6_2_0 -)
+    static QString pixelFormatToString(QVideoFrameFormat::PixelFormat pixelFormat);
+%End
 };
 
 %End
diff -Nur PyQt6-6.2.3/sip/QtMultimedia/qvideosink.sip PyQt6-6.3.0.dev2204011159/sip/QtMultimedia/qvideosink.sip
--- PyQt6-6.2.3/sip/QtMultimedia/qvideosink.sip	2022-02-01 15:19:46.641724800 +0100
+++ PyQt6-6.3.0.dev2204011159/sip/QtMultimedia/qvideosink.sip	2022-04-02 01:31:15.000000000 +0200
@@ -36,6 +36,11 @@
     void setSubtitleText(const QString &subtitle);
     void setVideoFrame(const QVideoFrame &frame);
     QVideoFrame videoFrame() const;
+
+signals:
+    void videoFrameChanged(const QVideoFrame &frame) const;
+    void subtitleTextChanged(const QString &subtitleText) const;
+    void videoSizeChanged();
 };
 
 %End
diff -Nur PyQt6-6.2.3/sip/QtNetwork/qlocalserver.sip PyQt6-6.3.0.dev2204011159/sip/QtNetwork/qlocalserver.sip
--- PyQt6-6.2.3/sip/QtNetwork/qlocalserver.sip	2022-02-01 15:19:46.098678600 +0100
+++ PyQt6-6.3.0.dev2204011159/sip/QtNetwork/qlocalserver.sip	2022-04-02 01:31:15.000000000 +0200
@@ -66,4 +66,10 @@
     void setSocketOptions(QLocalServer::SocketOptions options);
     QLocalServer::SocketOptions socketOptions() const;
     qintptr socketDescriptor() const;
+%If (Qt_6_3_0 -)
+    void setListenBacklogSize(int size);
+%End
+%If (Qt_6_3_0 -)
+    int listenBacklogSize() const;
+%End
 };
diff -Nur PyQt6-6.2.3/sip/QtNetwork/qlocalsocket.sip PyQt6-6.3.0.dev2204011159/sip/QtNetwork/qlocalsocket.sip
--- PyQt6-6.2.3/sip/QtNetwork/qlocalsocket.sip	2022-02-01 15:19:46.108842800 +0100
+++ PyQt6-6.3.0.dev2204011159/sip/QtNetwork/qlocalsocket.sip	2022-04-02 01:31:15.000000000 +0200
@@ -169,4 +169,46 @@
 %If (Qt_6_2_0 -)
     QLocalSocket::SocketOptions socketOptions() const;
 %End
+
+protected:
+%If (Qt_6_3_0 -)
+    virtual SIP_PYOBJECT readLineData(qint64 maxlen) /ReleaseGIL,TypeHint="bytes"/ [qint64 (char *data, qint64 maxSize)];
+%MethodCode
+        // Return the data read or None if there was an error.
+        if (a0 < 0)
+        {
+            PyErr_SetString(PyExc_ValueError, "maximum length of data to be read cannot be negative");
+            sipIsErr = 1;
+        }
+        else
+        {
+            char *s = new char[a0];
+            qint64 len;
+        
+            Py_BEGIN_ALLOW_THREADS
+        #if defined(SIP_PROTECTED_IS_PUBLIC)
+            len = sipSelfWasArg ? sipCpp->QLocalSocket::readLineData(s, a0) : sipCpp->readLineData(s, a0);
+        #else
+            len = sipCpp->sipProtectVirt_readLineData(sipSelfWasArg, s, a0);
+        #endif
+            Py_END_ALLOW_THREADS
+        
+            if (len < 0)
+            {
+                Py_INCREF(Py_None);
+                sipRes = Py_None;
+            }
+            else
+            {
+                sipRes = PyBytes_FromStringAndSize(s, len);
+        
+                if (!sipRes)
+                    sipIsErr = 1;
+            }
+        
+            delete[] s;
+        }
+%End
+
+%End
 };
diff -Nur PyQt6-6.2.3/sip/QtNetwork/qnetworkinformation.sip PyQt6-6.3.0.dev2204011159/sip/QtNetwork/qnetworkinformation.sip
--- PyQt6-6.2.3/sip/QtNetwork/qnetworkinformation.sip	2022-02-01 15:19:46.101753500 +0100
+++ PyQt6-6.3.0.dev2204011159/sip/QtNetwork/qnetworkinformation.sip	2022-04-02 01:31:15.000000000 +0200
@@ -44,6 +44,12 @@
 %If (Qt_6_2_0 -)
         CaptivePortal,
 %End
+%If (Qt_6_3_0 -)
+        TransportMedium,
+%End
+%If (Qt_6_3_0 -)
+        Metered,
+%End
     };
 
     typedef QFlags<QNetworkInformation::Feature> Features;
@@ -68,6 +74,40 @@
     void isBehindCaptivePortalChanged(bool state);
 %End
 
+public:
+%If (Qt_6_3_0 -)
+
+    enum class TransportMedium
+    {
+        Unknown,
+        Ethernet,
+        Cellular,
+        WiFi,
+        Bluetooth,
+    };
+
+%End
+%If (Qt_6_3_0 -)
+    QNetworkInformation::TransportMedium transportMedium() const;
+%End
+%If (Qt_6_3_0 -)
+    bool isMetered() const;
+%End
+%If (Qt_6_3_0 -)
+    QNetworkInformation::Features supportedFeatures() const;
+%End
+%If (Qt_6_3_0 -)
+    static bool loadDefaultBackend();
+%End
+
+signals:
+%If (Qt_6_3_0 -)
+    void transportMediumChanged(QNetworkInformation::TransportMedium current);
+%End
+%If (Qt_6_3_0 -)
+    void isMeteredChanged(bool isMetered);
+%End
+
 private:
     virtual ~QNetworkInformation();
 };
diff -Nur PyQt6-6.2.3/sip/QtNetwork/qnetworkreply.sip PyQt6-6.3.0.dev2204011159/sip/QtNetwork/qnetworkreply.sip
--- PyQt6-6.2.3/sip/QtNetwork/qnetworkreply.sip	2022-02-01 15:19:46.096781700 +0100
+++ PyQt6-6.3.0.dev2204011159/sip/QtNetwork/qnetworkreply.sip	2022-04-02 01:31:15.000000000 +0200
@@ -164,4 +164,12 @@
 %If (PyQt_SSL)
     virtual void ignoreSslErrorsImplementation(const QList<QSslError> &);
 %End
+
+signals:
+%If (Qt_6_3_0 -)
+    void socketStartedConnecting();
+%End
+%If (Qt_6_3_0 -)
+    void requestSent();
+%End
 };
diff -Nur PyQt6-6.2.3/sip/QtNetwork/qnetworkrequest.sip PyQt6-6.3.0.dev2204011159/sip/QtNetwork/qnetworkrequest.sip
--- PyQt6-6.2.3/sip/QtNetwork/qnetworkrequest.sip	2022-02-01 15:19:46.111368200 +0100
+++ PyQt6-6.3.0.dev2204011159/sip/QtNetwork/qnetworkrequest.sip	2022-04-02 01:31:15.000000000 +0200
@@ -68,6 +68,12 @@
         RedirectPolicyAttribute,
         Http2DirectAttribute,
         AutoDeleteReplyOnFinishAttribute,
+%If (Qt_6_3_0 -)
+        ConnectionCacheExpiryTimeoutSecondsAttribute,
+%End
+%If (Qt_6_3_0 -)
+        Http2CleartextAllowedAttribute,
+%End
         User,
         UserMax,
     };
diff -Nur PyQt6-6.2.3/sip/QtNetwork/qsslconfiguration.sip PyQt6-6.3.0.dev2204011159/sip/QtNetwork/qsslconfiguration.sip
--- PyQt6-6.2.3/sip/QtNetwork/qsslconfiguration.sip	2022-02-01 15:19:46.093800300 +0100
+++ PyQt6-6.3.0.dev2204011159/sip/QtNetwork/qsslconfiguration.sip	2022-04-02 01:31:15.000000000 +0200
@@ -99,6 +99,18 @@
     bool missingCertificateIsFatal() const;
     void setMissingCertificateIsFatal(bool cannotRecover);
     static const char *NextProtocolHttp1_1 /Encoding="None",NoSetter/;
+%If (Qt_6_3_0 -)
+    bool dtlsCookieVerificationEnabled() const;
+%End
+%If (Qt_6_3_0 -)
+    void setDtlsCookieVerificationEnabled(bool enable);
+%End
+%If (Qt_6_3_0 -)
+    static QSslConfiguration defaultDtlsConfiguration();
+%End
+%If (Qt_6_3_0 -)
+    static void setDefaultDtlsConfiguration(const QSslConfiguration &configuration);
+%End
 };
 
 %End
diff -Nur PyQt6-6.2.3/sip/QtNetwork/qtcpserver.sip PyQt6-6.3.0.dev2204011159/sip/QtNetwork/qtcpserver.sip
--- PyQt6-6.2.3/sip/QtNetwork/qtcpserver.sip	2022-02-01 15:19:46.135021700 +0100
+++ PyQt6-6.3.0.dev2204011159/sip/QtNetwork/qtcpserver.sip	2022-04-02 01:31:15.000000000 +0200
@@ -55,4 +55,12 @@
 signals:
     void newConnection();
     void acceptError(QAbstractSocket::SocketError socketError);
+
+public:
+%If (Qt_6_3_0 -)
+    void setListenBacklogSize(int size);
+%End
+%If (Qt_6_3_0 -)
+    int listenBacklogSize() const;
+%End
 };
diff -Nur PyQt6-6.2.3/sip/QtOpenGL/qopengltextureblitter.sip PyQt6-6.3.0.dev2204011159/sip/QtOpenGL/qopengltextureblitter.sip
--- PyQt6-6.2.3/sip/QtOpenGL/qopengltextureblitter.sip	2022-02-01 15:19:46.020474200 +0100
+++ PyQt6-6.3.0.dev2204011159/sip/QtOpenGL/qopengltextureblitter.sip	2022-04-02 01:31:15.000000000 +0200
@@ -48,6 +48,9 @@
     void blit(GLuint texture, const QMatrix4x4 &targetTransform, const QMatrix3x3 &sourceTransform);
     static QMatrix4x4 targetTransform(const QRectF &target, const QRect &viewport);
     static QMatrix3x3 sourceTransform(const QRectF &subTexture, const QSize &textureSize, QOpenGLTextureBlitter::Origin origin);
+%If (Qt_6_3_0 -)
+    bool supportsRectangleTarget() const;
+%End
 
 private:
     QOpenGLTextureBlitter(const QOpenGLTextureBlitter &);
diff -Nur PyQt6-6.2.3/sip/QtPositioning/qgeopositioninfo.sip PyQt6-6.3.0.dev2204011159/sip/QtPositioning/qgeopositioninfo.sip
--- PyQt6-6.2.3/sip/QtPositioning/qgeopositioninfo.sip	2022-02-01 15:19:46.644765000 +0100
+++ PyQt6-6.3.0.dev2204011159/sip/QtPositioning/qgeopositioninfo.sip	2022-04-02 01:31:15.000000000 +0200
@@ -37,6 +37,9 @@
         MagneticVariation,
         HorizontalAccuracy,
         VerticalAccuracy,
+%If (Qt_6_3_0 -)
+        DirectionAccuracy,
+%End
     };
 
     QGeoPositionInfo();
diff -Nur PyQt6-6.2.3/sip/QtQml/qqmlengine.sip PyQt6-6.3.0.dev2204011159/sip/QtQml/qqmlengine.sip
--- PyQt6-6.2.3/sip/QtQml/qqmlengine.sip	2022-02-01 15:19:46.048930200 +0100
+++ PyQt6-6.3.0.dev2204011159/sip/QtQml/qqmlengine.sip	2022-04-02 01:31:15.000000000 +0200
@@ -124,6 +124,9 @@
 %If (Qt_6_2_0 -)
     QList<QQmlAbstractUrlInterceptor *> urlInterceptors() const;
 %End
+%If (Qt_6_3_0 -)
+    void clearSingletons();
+%End
 };
 
 class QQmlImageProviderBase : QObject
diff -Nur PyQt6-6.2.3/sip/QtQml/qqmlproperty.sip PyQt6-6.3.0.dev2204011159/sip/QtQml/qqmlproperty.sip
--- PyQt6-6.2.3/sip/QtQml/qqmlproperty.sip	2022-02-01 15:19:46.023105100 +0100
+++ PyQt6-6.3.0.dev2204011159/sip/QtQml/qqmlproperty.sip	2022-04-02 01:31:15.000000000 +0200
@@ -105,6 +105,9 @@
     int index() const;
     QMetaProperty property() const;
     QMetaMethod method() const;
+%If (Qt_6_3_0 -)
+    void swap(QQmlProperty &other);
+%End
 };
 
 typedef QList<QQmlProperty> QQmlProperties;
diff -Nur PyQt6-6.2.3/sip/QtQuick/qquickitem.sip PyQt6-6.3.0.dev2204011159/sip/QtQuick/qquickitem.sip
--- PyQt6-6.2.3/sip/QtQuick/qquickitem.sip	2022-02-01 15:19:46.403180600 +0100
+++ PyQt6-6.3.0.dev2204011159/sip/QtQuick/qquickitem.sip	2022-04-02 01:31:15.000000000 +0200
@@ -34,6 +34,12 @@
         ItemIsFocusScope,
         ItemHasContents,
         ItemAcceptsDrops,
+%If (Qt_6_3_0 -)
+        ItemIsViewport,
+%End
+%If (Qt_6_3_0 -)
+        ItemObservesViewport,
+%End
     };
 
     typedef QFlags<QQuickItem::Flag> Flags;
@@ -300,4 +306,15 @@
 
 signals:
     void containmentMaskChanged();
+
+public:
+%If (Qt_6_3_0 -)
+    QQuickItem *viewportItem() const;
+%End
+%If (Qt_6_3_0 -)
+    void ensurePolished();
+%End
+%If (Qt_6_3_0 -)
+    void dumpItemTree() const;
+%End
 };
diff -Nur PyQt6-6.2.3/sip/QtQuick/qquickrendertarget.sip PyQt6-6.3.0.dev2204011159/sip/QtQuick/qquickrendertarget.sip
--- PyQt6-6.2.3/sip/QtQuick/qquickrendertarget.sip	2022-02-01 15:19:46.386583800 +0100
+++ PyQt6-6.3.0.dev2204011159/sip/QtQuick/qquickrendertarget.sip	2022-04-02 01:31:15.000000000 +0200
@@ -37,6 +37,12 @@
 %If (Qt_6_2_0 -)
     static QQuickRenderTarget fromOpenGLRenderBuffer(uint renderbufferId, const QSize &pixelSize, int sampleCount = 1);
 %End
+%If (Qt_6_3_0 -)
+    qreal devicePixelRatio() const;
+%End
+%If (Qt_6_3_0 -)
+    void setDevicePixelRatio(qreal ratio);
+%End
 };
 
 bool operator==(const QQuickRenderTarget &lhs, const QQuickRenderTarget &rhs);
diff -Nur PyQt6-6.2.3/sip/QtQuick/qsgmaterial.sip PyQt6-6.3.0.dev2204011159/sip/QtQuick/qsgmaterial.sip
--- PyQt6-6.2.3/sip/QtQuick/qsgmaterial.sip	2022-02-01 15:19:46.398758600 +0100
+++ PyQt6-6.3.0.dev2204011159/sip/QtQuick/qsgmaterial.sip	2022-04-02 01:31:15.000000000 +0200
@@ -33,6 +33,9 @@
         RequiresDeterminant,
         RequiresFullMatrixExceptTranslate,
         RequiresFullMatrix,
+%If (Qt_6_3_0 -)
+        NoBatching,
+%End
         CustomCompileStep,
     };
 
diff -Nur PyQt6-6.2.3/sip/QtQuick3D/qquick3dgeometry.sip PyQt6-6.3.0.dev2204011159/sip/QtQuick3D/qquick3dgeometry.sip
--- PyQt6-6.2.3/sip/QtQuick3D/qquick3dgeometry.sip	2022-02-01 15:19:46.156060500 +0100
+++ PyQt6-6.3.0.dev2204011159/sip/QtQuick3D/qquick3dgeometry.sip	2022-04-02 01:31:15.000000000 +0200
@@ -108,4 +108,25 @@
     void clear();
     QByteArray vertexData() const;
     QByteArray indexData() const;
+%If (Qt_6_3_0 -)
+    int subsetCount(int subset) const;
+%End
+%If (Qt_6_3_0 -)
+    int subsetCount() const;
+%End
+%If (Qt_6_3_0 -)
+    QVector3D subsetBoundsMin(int subset) const;
+%End
+%If (Qt_6_3_0 -)
+    QVector3D subsetBoundsMax(int subset) const;
+%End
+%If (Qt_6_3_0 -)
+    int subsetOffset(int subset) const;
+%End
+%If (Qt_6_3_0 -)
+    QString subsetName(int subset) const;
+%End
+%If (Qt_6_3_0 -)
+    void addSubset(int offset, int count, const QVector3D &boundsMin, const QVector3D &boundsMax, const QString &name = {});
+%End
 };
diff -Nur PyQt6-6.2.3/sip/QtWidgets/qfontcombobox.sip PyQt6-6.3.0.dev2204011159/sip/QtWidgets/qfontcombobox.sip
--- PyQt6-6.2.3/sip/QtWidgets/qfontcombobox.sip	2022-02-01 15:19:46.461632000 +0100
+++ PyQt6-6.3.0.dev2204011159/sip/QtWidgets/qfontcombobox.sip	2022-04-02 01:31:15.000000000 +0200
@@ -54,4 +54,38 @@
 
 protected:
     virtual bool event(QEvent *e);
+
+public:
+%If (Qt_6_3_0 -)
+    void setSampleTextForSystem(QFontDatabase::WritingSystem writingSystem, const QString &sampleText);
+%End
+%If (Qt_6_3_0 -)
+    QString sampleTextForSystem(QFontDatabase::WritingSystem writingSystem) const;
+%End
+%If (Qt_6_3_0 -)
+    void setSampleTextForFont(const QString &fontFamily, const QString &sampleText);
+%End
+%If (Qt_6_3_0 -)
+    QString sampleTextForFont(const QString &fontFamily) const;
+%End
+%If (Qt_6_3_0 -)
+    void setDisplayFont(const QString &fontFamily, const QFont &font);
+%End
+%If (Qt_6_3_0 -)
+    SIP_PYOBJECT displayFont(const QString &fontFamily) const /TypeHint="Optional[QFont]"/;
+%MethodCode
+        std::optional<QFont> f = sipCpp->displayFont(*a0);
+        
+        if (f)
+        {
+            sipRes = sipConvertFromNewType(new QFont(f.value()), sipType_QFont, NULL);
+        }
+        else
+        {
+            sipRes = Py_None;
+            Py_INCREF(sipRes);
+        }
+%End
+
+%End
 };
diff -Nur PyQt6-6.2.3/sip/QtWidgets/qmenu.sip PyQt6-6.3.0.dev2204011159/sip/QtWidgets/qmenu.sip
--- PyQt6-6.2.3/sip/QtWidgets/qmenu.sip	2022-02-01 15:19:46.458765000 +0100
+++ PyQt6-6.3.0.dev2204011159/sip/QtWidgets/qmenu.sip	2022-04-02 01:31:15.000000000 +0200
@@ -30,8 +30,13 @@
     explicit QMenu(QWidget *parent /TransferThis/ = 0);
     QMenu(const QString &title, QWidget *parent /TransferThis/ = 0);
     virtual ~QMenu();
+%If (- Qt_6_3_0)
     void addAction(QAction *);
+%End
+%If (- Qt_6_3_0)
     QAction *addAction(const QString &text) /Transfer/;
+%End
+%If (- Qt_6_3_0)
     QAction *addAction(const QString &text, SIP_PYOBJECT slot /TypeHint="PYQT_SLOT"/, const QKeySequence &shortcut = 0) /Transfer/;
 %MethodCode
         QObject *receiver;
@@ -47,7 +52,11 @@
         }
 %End
 
+%End
+%If (- Qt_6_3_0)
     QAction *addAction(const QIcon &icon, const QString &text) /Transfer/;
+%End
+%If (- Qt_6_3_0)
     QAction *addAction(const QIcon &icon, const QString &text, SIP_PYOBJECT slot /TypeHint="PYQT_SLOT"/, const QKeySequence &shortcut = 0) /Transfer/;
 %MethodCode
         QObject *receiver;
@@ -63,6 +72,7 @@
         }
 %End
 
+%End
     QAction *addMenu(QMenu *menu);
     QMenu *addMenu(const QString &title) /Transfer/;
     QMenu *addMenu(const QIcon &icon, const QString &title) /Transfer/;
@@ -131,4 +141,7 @@
 %End
     void showTearOffMenu();
     void showTearOffMenu(const QPoint &pos);
+%If (Qt_6_3_0 -)
+    static QMenu *menuInAction(const QAction *action);
+%End
 };
diff -Nur PyQt6-6.2.3/sip/QtWidgets/qmenubar.sip PyQt6-6.3.0.dev2204011159/sip/QtWidgets/qmenubar.sip
--- PyQt6-6.2.3/sip/QtWidgets/qmenubar.sip	2022-02-01 15:19:46.551850000 +0100
+++ PyQt6-6.3.0.dev2204011159/sip/QtWidgets/qmenubar.sip	2022-04-02 01:31:15.000000000 +0200
@@ -29,8 +29,13 @@
 public:
     explicit QMenuBar(QWidget *parent /TransferThis/ = 0);
     virtual ~QMenuBar();
+%If (- Qt_6_3_0)
     void addAction(QAction *);
+%End
+%If (- Qt_6_3_0)
     QAction *addAction(const QString &text) /Transfer/;
+%End
+%If (- Qt_6_3_0)
     QAction *addAction(const QString &text, SIP_PYOBJECT slot /TypeHint="PYQT_SLOT"/) /Transfer/;
 %MethodCode
         QObject *receiver;
@@ -46,6 +51,7 @@
         }
 %End
 
+%End
     QAction *addMenu(QMenu *menu);
     QMenu *addMenu(const QString &title) /Transfer/;
     QMenu *addMenu(const QIcon &icon, const QString &title) /Transfer/;
diff -Nur PyQt6-6.2.3/sip/QtWidgets/qstyle.sip PyQt6-6.3.0.dev2204011159/sip/QtWidgets/qstyle.sip
--- PyQt6-6.2.3/sip/QtWidgets/qstyle.sip	2022-02-01 15:19:46.453133600 +0100
+++ PyQt6-6.3.0.dev2204011159/sip/QtWidgets/qstyle.sip	2022-04-02 01:31:15.000000000 +0200
@@ -415,6 +415,9 @@
 %If (Qt_6_2_0 -)
         PM_LineEditIconSize,
 %End
+%If (Qt_6_3_0 -)
+        PM_LineEditIconMargin,
+%End
         PM_CustomBase,
     };
 
@@ -571,6 +574,12 @@
 %If (Qt_6_1_0 -)
         SH_TabBar_AllowWheelScrolling,
 %End
+%If (Qt_6_3_0 -)
+        SH_Table_AlwaysDrawLeftTopGridLines,
+%End
+%If (Qt_6_3_0 -)
+        SH_SpinBox_SelectOnStep,
+%End
         SH_CustomBase,
     };
 
@@ -656,6 +665,9 @@
         SP_DialogRetryButton,
         SP_DialogIgnoreButton,
         SP_RestoreDefaultsButton,
+%If (Qt_6_3_0 -)
+        SP_TabCloseButton,
+%End
         SP_CustomBase,
     };
 
diff -Nur PyQt6-6.2.3/sip/QtWidgets/qtablewidget.sip PyQt6-6.3.0.dev2204011159/sip/QtWidgets/qtablewidget.sip
--- PyQt6-6.2.3/sip/QtWidgets/qtablewidget.sip	2022-02-01 15:19:46.458020400 +0100
+++ PyQt6-6.3.0.dev2204011159/sip/QtWidgets/qtablewidget.sip	2022-04-02 01:31:15.000000000 +0200
@@ -235,3 +235,10 @@
 private:
     virtual void setModel(QAbstractItemModel *model /KeepReference/);
 };
+
+%If (Qt_6_3_0 -)
+bool operator==(const QTableWidgetSelectionRange &lhs, const QTableWidgetSelectionRange &rhs);
+%End
+%If (Qt_6_3_0 -)
+bool operator!=(const QTableWidgetSelectionRange &lhs, const QTableWidgetSelectionRange &rhs);
+%End
diff -Nur PyQt6-6.2.3/sip/QtWidgets/qtoolbar.sip PyQt6-6.3.0.dev2204011159/sip/QtWidgets/qtoolbar.sip
--- PyQt6-6.2.3/sip/QtWidgets/qtoolbar.sip	2022-02-01 15:19:46.463032200 +0100
+++ PyQt6-6.3.0.dev2204011159/sip/QtWidgets/qtoolbar.sip	2022-04-02 01:31:15.000000000 +0200
@@ -38,9 +38,16 @@
     void setOrientation(Qt::Orientation orientation);
     Qt::Orientation orientation() const;
     void clear();
+%If (- Qt_6_3_0)
     void addAction(QAction *);
+%End
+%If (- Qt_6_3_0)
     QAction *addAction(const QString &text) /Transfer/;
+%End
+%If (- Qt_6_3_0)
     QAction *addAction(const QIcon &icon, const QString &text) /Transfer/;
+%End
+%If (- Qt_6_3_0)
     QAction *addAction(const QString &text, SIP_PYOBJECT slot /TypeHint="PYQT_SLOT"/) /Transfer/;
 %MethodCode
         QObject *receiver;
@@ -56,6 +63,8 @@
         }
 %End
 
+%End
+%If (- Qt_6_3_0)
     QAction *addAction(const QIcon &icon, const QString &text, SIP_PYOBJECT slot /TypeHint="PYQT_SLOT"/) /Transfer/;
 %MethodCode
         QObject *receiver;
@@ -71,6 +80,7 @@
         }
 %End
 
+%End
     QAction *addSeparator() /Transfer/;
     QAction *insertSeparator(QAction *before) /Transfer/;
     QAction *addWidget(QWidget *widget /Transfer/) /Transfer/;
diff -Nur PyQt6-6.2.3/sip/QtWidgets/qwidget.sip PyQt6-6.3.0.dev2204011159/sip/QtWidgets/qwidget.sip
--- PyQt6-6.2.3/sip/QtWidgets/qwidget.sip	2022-02-01 15:19:46.506860700 +0100
+++ PyQt6-6.3.0.dev2204011159/sip/QtWidgets/qwidget.sip	2022-04-02 01:31:15.000000000 +0200
@@ -263,6 +263,86 @@
     QWidget *nextInFocusChain() const;
     bool acceptDrops() const;
     void setAcceptDrops(bool on);
+%If (Qt_6_3_0 -)
+    QAction *addAction(const QIcon &icon, const QString &text) /Transfer/;
+%End
+%If (Qt_6_3_0 -)
+    QAction *addAction(const QIcon &icon, const QString &text, SIP_PYOBJECT slot /TypeHint="PYQT_SLOT"/, Qt::ConnectionType type = Qt::AutoConnection) /Transfer/;
+%MethodCode
+        QObject *receiver;
+        QByteArray slot_signature;
+        
+        if ((sipError = pyqt6_qtwidgets_get_connection_parts(a2, sipCpp, "()", false, &receiver, slot_signature)) == sipErrorNone)
+        {
+            sipRes = sipCpp->addAction(*a0, *a1, receiver, slot_signature.constData(), a3);
+        }
+        else if (sipError == sipErrorContinue)
+        {
+            sipError = sipBadCallableArg(2, a2);
+        }
+%End
+
+%End
+%If (Qt_6_3_0 -)
+    QAction *addAction(const QIcon &icon, const QString &text, const QKeySequence &shortcut) /Transfer/;
+%End
+%If (Qt_6_3_0 -)
+    QAction *addAction(const QIcon &icon, const QString &text, const QKeySequence &shortcut, SIP_PYOBJECT slot /TypeHint="PYQT_SLOT"/, Qt::ConnectionType type = Qt::AutoConnection) /Transfer/;
+%MethodCode
+        QObject *receiver;
+        QByteArray slot_signature;
+        
+        if ((sipError = pyqt6_qtwidgets_get_connection_parts(a3, sipCpp, "()", false, &receiver, slot_signature)) == sipErrorNone)
+        {
+            sipRes = sipCpp->addAction(*a0, *a1, *a2, receiver, slot_signature.constData(), a4);
+        }
+        else if (sipError == sipErrorContinue)
+        {
+            sipError = sipBadCallableArg(3, a3);
+        }
+%End
+
+%End
+%If (Qt_6_3_0 -)
+    QAction *addAction(const QString &text) /Transfer/;
+%End
+%If (Qt_6_3_0 -)
+    QAction *addAction(const QString &text, const QKeySequence &shortcut) /Transfer/;
+%End
+%If (Qt_6_3_0 -)
+    QAction *addAction(QString &text, SIP_PYOBJECT slot /TypeHint="PYQT_SLOT"/, Qt::ConnectionType type = Qt::AutoConnection) /Transfer/;
+%MethodCode
+        QObject *receiver;
+        QByteArray slot_signature;
+        
+        if ((sipError = pyqt6_qtwidgets_get_connection_parts(a1, sipCpp, "()", false, &receiver, slot_signature)) == sipErrorNone)
+        {
+            sipRes = sipCpp->addAction(*a0, receiver, slot_signature.constData(), a2);
+        }
+        else if (sipError == sipErrorContinue)
+        {
+            sipError = sipBadCallableArg(1, a1);
+        }
+%End
+
+%End
+%If (Qt_6_3_0 -)
+    QAction *addAction(const QString &text, const QKeySequence &shortcut, SIP_PYOBJECT slot /TypeHint="PYQT_SLOT"/, Qt::ConnectionType type = Qt::AutoConnection) /Transfer/;
+%MethodCode
+        QObject *receiver;
+        QByteArray slot_signature;
+        
+        if ((sipError = pyqt6_qtwidgets_get_connection_parts(a2, sipCpp, "()", false, &receiver, slot_signature)) == sipErrorNone)
+        {
+            sipRes = sipCpp->addAction(*a0, *a1, receiver, slot_signature.constData(), a3);
+        }
+        else if (sipError == sipErrorContinue)
+        {
+            sipError = sipBadCallableArg(2, a2);
+        }
+%End
+
+%End
     void addAction(QAction *action);
     void addActions(const QList<QAction *> &actions);
     void insertAction(QAction *before, QAction *action);
